knots = knots,
Boundary.knots = c(0, 1),
degree = deg,
intercept = F)
#bs.obs <- bs.obs[, -c(ncol(bs.obs) - 1, ncol(bs.obs))]
# initiate f: density
f <- numeric(n)
# initiate g: derivative of f w.r.t. alpha
g <- matrix(nrow = n, ncol = length(alpha))
for (ii in 1:n) {
if (delta[ii] == 1) {
f[ii] <- bs.obs[ii,] %*% alpha
g[ii,] <- bs.obs[ii,]
} else {
f[ii] <- subint.width * sum(bs.grid[xx > w[ii],] %*% alpha)
g[ii,] <- subint.width * colSums(bs.grid[xx > w[ii],])
}
}
# apply chain rule to get derivative wrt theta
gg <- (-g / f) %*% g.softmax(theta, wts = wts)
return(gg)
}
# negative derivative of log-density of W, Delta | Z
g.log.fwdz.spline <- function(dat, theta) {
# initiate derivative matrix
gll <- matrix(0, nrow = nrow(dat), ncol = length(c(theta)))
for (zi in 1:length(zs)) {
# subset to observations with given Z value
z.ind <- dat$Z == zs[zi]
z.yind <- 1:nrow(theta) + (zi - 1) * nrow(theta)
datz <- dat[z.ind,]
# compute loglik value
gll[z.ind, z.yind] <-
g.log.fwd.spline(dat = datz, theta = theta[,zi])
}
return(gll)
}
# initial parameters
theta0 <- matrix(0, nrow = length(wts) - 1, ncol = length(zs))
# estimate B-spline coefficients
opt.res <- optim(
par = c(theta0),
fn = function(x) sum(log.fwdz.spline(
dat = dat,
theta = matrix(x, ncol = length(zs)))),
gr = function(x) colSums(g.log.fwdz.spline(
dat = dat,
theta = matrix(x, ncol = length(zs)))),
method = "BFGS", control = list(maxit = 1000)
)
w
alpha <- softmax(theta, wts = wts)
delta <- dat$Delta
w <- dat$W
n <- nrow(dat)
subint.width <- 1/length(xx)
# B-spline basis with observed W
bs.obs <- splines::bs(
x = dat$W,
knots = knots,
Boundary.knots = c(0, 1),
degree = deg,
intercept = F)
ii = 1
xx > w[ii]
w[ii] = 2
colSums(bs.grid[xx > w[ii],])
xx
xx > w[ii]
bs.grid[xx > w[ii],]
delta <- dat$Delta
w <- dat$W
n <- nrow(dat)
subint.width <- 1/length(xx)
# B-spline basis with observed W
bs.obs <- splines::bs(
x = dat$W,
knots = knots,
Boundary.knots = c(0, 1),
degree = deg,
intercept = F)
for (ii in 1:n) {
if (delta[ii] == 1) {
f[ii] <- bs.obs[ii,] %*% alpha
g[ii,] <- bs.obs[ii,]
} else {
print(c(ii, colSums(bs.grid[xx > w[ii],]))
}
for (ii in 1:n) {
if (delta[ii] == 1) {
f[ii] <- bs.obs[ii,] %*% alpha
g[ii,] <- bs.obs[ii,]
} else {
print(c(ii, colSums(bs.grid[xx > w[ii],])))
}
}
for (ii in 1:n) {
if (delta[ii] == 1) {
f[ii] <- 0
g[ii,] <- bs.obs[ii,]
} else {
print(c(ii, colSums(bs.grid[xx > w[ii],])))
}
}
# initiate f: density
f <- numeric(n)
# initiate g: derivative of f w.r.t. alpha
g <- matrix(nrow = n, ncol = length(alpha))
for (ii in 1:n) {
if (delta[ii] == 1) {
f[ii] <- 0
} else {
print(c(ii, colSums(bs.grid[xx > w[ii],])))
}
}
print(ii)
for (ii in 1:n) {
if (delta[ii] == 1) {
f[ii] <- 0
} else {
print(ii)
colSums(bs.grid[xx > w[ii],])
}
}
ii = 148
xx > w[ii]
bs.grid[xx > w[ii],]
colSums(bs.grid[xx > w[ii],])
w[ii]
xx > w[ii]
bs.grid[xx > w[ii],]
subint.width * bs.grid[xx > w[ii],]
ii = ii + 1
subint.width * colSums(bs.grid[xx > w[ii],])
colSums(bs.grid[xx > w[ii],])
subint.width * bs.grid[xx > w[ii],]
subint.width * colSums(bs.grid[xx > w[ii],])
ii = ii - 1
subint.width * bs.grid[xx > w[ii],]
load_all()
## nonparametric estimated distribution of X|Z (using B-splines)
spline.res.x <- fit.spline(dat = dat, m.knots = m.knots, deg = deg)
rm(list = ls())
#setwd(dirname(getwd()))
library(statmod)
library(devtools)
library(ggplot2)
library(zipfR)
library(splines2)
library(nloptr)
library(tictoc)
load_all()
set.seed(3)
n <- 8000             # sample size
q <- 0.8              # censoring proportion
B <- c(1, 10, 2)      # beta
s2 <- 2               # variance of Y|X,Z
ls2 <- log(2)
x.thetas <- c(0.5, -0.5)   # theta parameters for X|Z
x.gamma <- 1          # gamma parameter for X|Z
c.gamma <- 2          # gamma parameter for C|Z
mx <- 40                   # number of nodes for X
my <- 5                    # number of nodes for Y
dat.list <- gen.data.beta(
n = n, q = q, B = B, s2 = s2,
x.thetas = x.thetas, x.gamma = x.gamma, c.gamma = c.gamma)
datf <- dat.list$datf          # full data
dat0 <- dat.list$dat0          # oracle data
dat <- dat.list$dat            # observed data
datcc <- dat.list$datcc        # complete case data
zs <- sort(unique(dat$Z))      # unique z values
# plot generated data
ggplot(datf,
aes(x = X,
y = Y,
color = factor(Z))) +
geom_point() +
labs(color = "Z") +
ggtitle("Oracle Data")
ggplot(datcc,
aes(x = W,
y = Y,
color = factor(Z))) +
geom_point() +
labs(color = "Z") +
ggtitle("Complete Case Data")
# parameters for spline model
m.knots <- 5
deg <- 3
# fit spline model and extract estimated density
tic("fit spline model")
spline.res <- fit.spline(dat = dat, m.knots = m.knots, deg = deg)
###############################################################################
###############################################################################
# MLE B-spline Implementation
# Brian Richardson
# 2024-06-21
# Purpose: develop B-spline model for X|Z
###############################################################################
###############################################################################
# prep workspace ----------------------------------------------------------
rm(list = ls())
#setwd(dirname(getwd()))
library(statmod)
library(devtools)
library(ggplot2)
library(zipfR)
library(splines2)
library(nloptr)
library(tictoc)
load_all()
# define parameters -------------------------------------------------------
set.seed(3)
n <- 8000             # sample size
q <- 0.8              # censoring proportion
B <- c(1, 10, 2)      # beta
s2 <- 2               # variance of Y|X,Z
ls2 <- log(2)
x.thetas <- c(0.5, -0.5)   # theta parameters for X|Z
x.gamma <- 1          # gamma parameter for X|Z
c.gamma <- 2          # gamma parameter for C|Z
mx <- 40                   # number of nodes for X
my <- 5                    # number of nodes for Y
# generate data -----------------------------------------------------------
dat.list <- gen.data.beta(
n = n, q = q, B = B, s2 = s2,
x.thetas = x.thetas, x.gamma = x.gamma, c.gamma = c.gamma)
datf <- dat.list$datf          # full data
dat0 <- dat.list$dat0          # oracle data
dat <- dat.list$dat            # observed data
datcc <- dat.list$datcc        # complete case data
zs <- sort(unique(dat$Z))      # unique z values
# plot generated data
ggplot(datf,
aes(x = X,
y = Y,
color = factor(Z))) +
geom_point() +
labs(color = "Z") +
ggtitle("Oracle Data")
ggplot(datcc,
aes(x = W,
y = Y,
color = factor(Z))) +
geom_point() +
labs(color = "Z") +
ggtitle("Complete Case Data")
# estimate X|Z density using Splines --------------------------------------
# parameters for spline model
m.knots <- 5
deg <- 3
# fit spline model and extract estimated density
tic("fit spline model")
spline.res <- fit.spline(dat = dat, m.knots = m.knots, deg = deg)
toc()
eta1.hat <- spline.res$dens
alpha.hat <- spline.res$alpha
theta.hat <- spline.res$theta
logf <- spline.res$glogf
glogf <- spline.res$glogf
wts <- spline.res$wts
knots <- spline.res$knots
# plot results
datf %>%
mutate(eta1.hat = eta1.hat(x = X, z = Z),
Z = factor(Z)) %>%
ggplot() +
geom_line(aes(x = X,
y = eta1.hat,
color = Z)) +
geom_histogram(aes(x = X,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
datcc %>%
mutate(Z = factor(Z)) %>%
ggplot() +
geom_histogram(aes(x = W,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
datcc %>%
mutate(eta1.hat = eta1.hat(x = X, z = Z),
Z = factor(Z)) %>%
ggplot() +
geom_histogram(aes(x = W,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
datcc %>%
mutate(eta1.hat = eta1.hat(x = W, z = Z),
Z = factor(Z)) %>%
ggplot() +
geom_histogram(aes(x = W,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
datcc %>%
mutate(eta1.hat = eta1.hat(x = W, z = Z),
Z = factor(Z)) %>%
ggplot() +
geom_line(aes(x = W,
y = eta1.hat,
color = Z)) +
geom_histogram(aes(x = W,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
# plot results
datf %>%
mutate(eta1.hat = eta1.hat(x = X, z = Z),
Z = factor(Z)) %>%
ggplot() +
geom_line(aes(x = X,
y = eta1.hat,
color = Z)) +
geom_histogram(aes(x = X,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
datcc %>%
mutate(eta1.hat = eta1.hat(x = W, z = Z),
Z = factor(Z)) %>%
ggplot() +
geom_line(aes(x = W,
y = eta1.hat,
color = Z)) +
geom_histogram(aes(x = W,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
m.knots <- 10
deg <- 3
# fit spline model and extract estimated density
tic("fit spline model")
spline.res <- fit.spline(dat = dat, m.knots = m.knots, deg = deg)
toc()
eta1.hat <- spline.res$dens
alpha.hat <- spline.res$alpha
theta.hat <- spline.res$theta
logf <- spline.res$glogf
glogf <- spline.res$glogf
wts <- spline.res$wts
knots <- spline.res$knots
# plot results
datf %>%
mutate(eta1.hat = eta1.hat(x = X, z = Z),
Z = factor(Z)) %>%
ggplot() +
geom_line(aes(x = X,
y = eta1.hat,
color = Z)) +
geom_histogram(aes(x = X,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
datcc %>%
mutate(eta1.hat = eta1.hat(x = W, z = Z),
Z = factor(Z)) %>%
ggplot() +
geom_line(aes(x = W,
y = eta1.hat,
color = Z)) +
geom_histogram(aes(x = W,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true beta
B <- c(1, 10, 2, log(1))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim2_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- gsub(".B", "", colnames(sim.out))
colnames(sim.out) <- gsub("B2", "trueB2", colnames(sim.out))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("B"),
names_to = "method.param",
values_to = "estimate") %>%
mutate(method = factor(substr(method.param, 2, 3),
levels = c("or", "cc", "ml", "sp"),
labels = c("Oracle",
"Complete Case",
"MLE",
"SPARCC")),
param = factor(substr(method.param, 4, 4)),
B.true = B[param])
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, method) %>%
summarize(prop.error = mean(is.na(estimate))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
# extract simulation parameters
q <- unique(sim.out$q)
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, q))
# make labels for plots
param.labs <- c("\u03B20", "\u03B21", "\u03B22", "log\u03C3\u00B2")
names(param.labs) <- 1:4
# colorblind friendly pallette
#pal_light <- cbbPalette <- c('#BBBBBB', '#228833', '#4477AA', '#AA3377')
#pal_dark <- cbbPalette <- c('#5d5d5d', '#114419', '#223b55', '#55193b')
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# obtain empirical variances by method, parameter, and q
sim.out.sum <- sim.out.long %>%
group_by(q, method, param) %>%
filter(!is.na(estimate)) %>%
summarise(var = var(estimate),
Var = mean((estimate - B.true) ^ 2),
se.Var = sd((estimate - B.true) ^ 2) / sqrt(n.rep),
Var.lower = Var - qnorm(0.975) * se.Var ,
Var.upper = Var + qnorm(0.975) * se.Var)
# plot variance over q
ggplot(sim.out.sum,
aes(x = q,
y = Var,
ymin = Var.lower,
ymax = Var.upper,
fill = method,
color = method,
shape = method)) +
geom_point() +
#geom_errorbar() +
geom_ribbon(alpha = 0.3) +
geom_line() +
facet_wrap(~ param,
scales = "free",
labeller = labeller(param = param.labs)) +
theme_bw() +
theme(legend.position = "bottom") +
scale_color_manual(values = pal_light[c(1, 2, 3, 5)]) +
labs(x = "Censoring Proportion (q)",
y = "Empircal Variance of Parameter Estimates",
color = "Method",
shape = "Method",
fill = "Method") +
ggtitle("Variance of Parameter Estimators by Censoring Proportion",
subtitle = paste0(n.rep, " Simulations per Setting"))
# plot variance over q for beta_1 only
ggplot(filter(sim.out.sum, param == 2, q <= 0.85),
aes(x = q,
y = var,
ymin = Var.lower,
ymax = Var.upper,
fill = method,
color = method,
shape = method)) +
geom_point() +
geom_line() +
geom_ribbon(alpha = 0.3) +
labs(x = "Censoring Proportion (q)",
y = "Variance",
color = "Method",
shape = "Method",
fill = "Method") +
theme_bw() +
theme(legend.position = "bottom") +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1)) +
scale_color_manual(values = pal_light[c(1, 2, 3, 5)]) #+
#ggtitle("Variance of \u03B21 Estimator by Censoring Proportion",
#subtitle = paste0(n.rep, " Simulations per Setting"))
ggsave("sim_plots/sim1_2_variances.png",
dpi = 300,
width = 6,
height = 4)
