set.seed(seed)
dat.list <- gen.data.beta(
n = n, q = q, B = B, s2 = s2,
x.thetas = x.thetas, x.gamma = x.gamma, c.gamma = c.gamma)
datf <- dat.list$datf          # full data
dat0 <- dat.list$dat0          # oracle data
dat <- dat.list$dat            # observed data
datcc <- dat.list$datcc        # complete case data
zs <- sort(unique(dat$Z))      # unique z values
## X|Z quadrature nodes
x.nds <- vapply(
X = zs,
FUN.VALUE = numeric(mx),
FUN = function(z) seq(1E-6, 1-1E-6, length = mx))
## X|Z correctly modeled as conditional beta
x.params.hat.correct <- t(vapply(
X = 0:1,
FUN.VALUE = numeric(2),
FUN = function(z) {
est <- dat %>%
filter(Z == z) %>%
mutate(left = W,
right = ifelse(Delta == 1, W, NA)) %>%
dplyr::select(left, right) %>%
fitdistrplus::fitdistcens(distr = "beta")
return(est$estimate)
}))
eta1.correct <- function(x, z) {
dbeta(x = x,
shape1 = x.params.hat.correct[z + 1, "shape1"],
shape2 = x.params.hat.correct[z + 1, "shape2"])
}
x.wts.correct <- vapply(
X = 1:length(zs),
FUN.VALUE = numeric(mx),
FUN = function(i) eta1.correct(x.nds[,i], zs[i]) /
sum(eta1.correct(x.nds[,i], zs[i])))
## X|Z incorrectly modeled as marginal beta
x.fit.wrong <- dat %>%
mutate(left = W,
right = ifelse(Delta == 1, W, NA)) %>%
dplyr::select(left, right) %>%
fitdistrplus::fitdistcens(distr = "beta")
x.params.hat.wrong <- x.fit.wrong$estimate
eta1.wrong <- function(x, z) {
dbeta(x = x,
shape1 = x.params.hat.wrong["shape1"],
shape2 = x.params.hat.wrong["shape2"])
}
x.wts.wrong <- vapply(
X = 1:length(zs),
FUN.VALUE = numeric(mx),
FUN = function(i) eta1.wrong(x.nds[,i], zs[i]) /
sum(eta1.wrong(x.nds[,i], zs[i])))
## nonparametric estimated distribution of X|Z (using B-splines)
spline.res.x <- fit.spline(dat = dat, m.knots = m.knots, deg = deg)
eta1.nonpar <- spline.res.x$dens
# unique z values
zs <- sort(unique(dat$Z))
# B-spline knots
knots <- quantile(c(0, 1, dat$W), probs = seq(0, 1, length = m.knots))
# B-spline basis with grid for integration
xx <- seq(0, 1, length = 100)
bs.grid <- splines::bs(
x = xx,
knots = knots,
Boundary.knots = c(0, 1),
degree = deg,
intercept = F)
#bs.grid <- bs.grid[, -c(ncol(bs.grid) - 1, ncol(bs.grid))]
wts <- colMeans(bs.grid)
# negative log density of W, Delta
log.fwd.spline <- function(dat, theta) {
alpha <- softmax(theta, wts = wts)
delta <- dat$Delta
w <- dat$W
n <- nrow(dat)
subint.width <- 1/length(xx)
# B-spline basis with observed W
bs.obs <- splines::bs(
x = dat$W,
knots = knots,
Boundary.knots = c(0, 1),
degree = deg,
intercept = F)
#bs.obs <- bs.obs[, -c(ncol(bs.obs) - 1, ncol(bs.obs))]
f <- numeric(n)
for (ii in 1:n) {
if (delta[ii] == 1) {
f[ii] <- bs.obs[ii,] %*% alpha
} else {
f[ii] <- subint.width * sum(bs.grid[xx > w[ii],] %*% alpha)
}
}
return(-log(f))
}
# negative log-density of W, Delta | Z
log.fwdz.spline <- function(dat, theta) {
ll <- numeric(nrow(dat))
for (zi in 1:length(zs)) {
# subset to observations with given Z value
z.ind <- dat$Z == zs[zi]
datz <- dat[z.ind,]
# compute loglik value
ll[z.ind] <- log.fwd.spline(dat = datz, theta = theta[,zi])
}
return(ll)
}
# derivative of negative log density of W, Delta w.r.t. theta
g.log.fwd.spline <- function(dat, theta) {
alpha <- softmax(theta, wts = wts)
delta <- dat$Delta
w <- dat$W
n <- nrow(dat)
subint.width <- 1/length(xx)
# B-spline basis with observed W
bs.obs <- splines::bs(
x = dat$W,
knots = knots,
Boundary.knots = c(0, 1),
degree = deg,
intercept = F)
#bs.obs <- bs.obs[, -c(ncol(bs.obs) - 1, ncol(bs.obs))]
# initiate f: density
f <- numeric(n)
# initiate g: derivative of f w.r.t. alpha
g <- matrix(nrow = n, ncol = length(alpha))
for (ii in 1:n) {
if (delta[ii] == 1) {
f[ii] <- bs.obs[ii,] %*% alpha
g[ii,] <- bs.obs[ii,]
} else {
f[ii] <- subint.width * sum(bs.grid[xx > w[ii],] %*% alpha)
g[ii,] <- subint.width * colSums(bs.grid[xx > w[ii],])
}
}
# apply chain rule to get derivative wrt theta
gg <- (-g / f) %*% g.softmax(theta, wts = wts)
return(gg)
}
# negative derivative of log-density of W, Delta | Z
g.log.fwdz.spline <- function(dat, theta) {
# initiate derivative matrix
gll <- matrix(0, nrow = nrow(dat), ncol = length(c(theta)))
for (zi in 1:length(zs)) {
# subset to observations with given Z value
z.ind <- dat$Z == zs[zi]
z.yind <- 1:nrow(theta) + (zi - 1) * nrow(theta)
datz <- dat[z.ind,]
# compute loglik value
gll[z.ind, z.yind] <-
g.log.fwd.spline(dat = datz, theta = theta[,zi])
}
return(gll)
}
# initial parameters
theta0 <- matrix(0, nrow = length(wts) - 1, ncol = length(zs))
# estimate B-spline coefficients
opt.res <- optim(
par = c(theta0),
fn = function(x) sum(log.fwdz.spline(
dat = dat,
theta = matrix(x, ncol = length(zs)))),
gr = function(x) colSums(g.log.fwdz.spline(
dat = dat,
theta = matrix(x, ncol = length(zs)))),
method = "BFGS", control = list(maxit = 1000)
)
w
alpha <- softmax(theta, wts = wts)
delta <- dat$Delta
w <- dat$W
n <- nrow(dat)
subint.width <- 1/length(xx)
# B-spline basis with observed W
bs.obs <- splines::bs(
x = dat$W,
knots = knots,
Boundary.knots = c(0, 1),
degree = deg,
intercept = F)
ii = 1
xx > w[ii]
w[ii] = 2
colSums(bs.grid[xx > w[ii],])
xx
xx > w[ii]
bs.grid[xx > w[ii],]
delta <- dat$Delta
w <- dat$W
n <- nrow(dat)
subint.width <- 1/length(xx)
# B-spline basis with observed W
bs.obs <- splines::bs(
x = dat$W,
knots = knots,
Boundary.knots = c(0, 1),
degree = deg,
intercept = F)
for (ii in 1:n) {
if (delta[ii] == 1) {
f[ii] <- bs.obs[ii,] %*% alpha
g[ii,] <- bs.obs[ii,]
} else {
print(c(ii, colSums(bs.grid[xx > w[ii],]))
}
for (ii in 1:n) {
if (delta[ii] == 1) {
f[ii] <- bs.obs[ii,] %*% alpha
g[ii,] <- bs.obs[ii,]
} else {
print(c(ii, colSums(bs.grid[xx > w[ii],])))
}
}
for (ii in 1:n) {
if (delta[ii] == 1) {
f[ii] <- 0
g[ii,] <- bs.obs[ii,]
} else {
print(c(ii, colSums(bs.grid[xx > w[ii],])))
}
}
# initiate f: density
f <- numeric(n)
# initiate g: derivative of f w.r.t. alpha
g <- matrix(nrow = n, ncol = length(alpha))
for (ii in 1:n) {
if (delta[ii] == 1) {
f[ii] <- 0
} else {
print(c(ii, colSums(bs.grid[xx > w[ii],])))
}
}
print(ii)
for (ii in 1:n) {
if (delta[ii] == 1) {
f[ii] <- 0
} else {
print(ii)
colSums(bs.grid[xx > w[ii],])
}
}
ii = 148
xx > w[ii]
bs.grid[xx > w[ii],]
colSums(bs.grid[xx > w[ii],])
w[ii]
xx > w[ii]
bs.grid[xx > w[ii],]
subint.width * bs.grid[xx > w[ii],]
ii = ii + 1
subint.width * colSums(bs.grid[xx > w[ii],])
colSums(bs.grid[xx > w[ii],])
subint.width * bs.grid[xx > w[ii],]
subint.width * colSums(bs.grid[xx > w[ii],])
ii = ii - 1
subint.width * bs.grid[xx > w[ii],]
load_all()
## nonparametric estimated distribution of X|Z (using B-splines)
spline.res.x <- fit.spline(dat = dat, m.knots = m.knots, deg = deg)
rm(list = ls())
#setwd(dirname(getwd()))
library(statmod)
library(devtools)
library(ggplot2)
library(zipfR)
library(splines2)
library(nloptr)
library(tictoc)
load_all()
set.seed(3)
n <- 8000             # sample size
q <- 0.8              # censoring proportion
B <- c(1, 10, 2)      # beta
s2 <- 2               # variance of Y|X,Z
ls2 <- log(2)
x.thetas <- c(0.5, -0.5)   # theta parameters for X|Z
x.gamma <- 1          # gamma parameter for X|Z
c.gamma <- 2          # gamma parameter for C|Z
mx <- 40                   # number of nodes for X
my <- 5                    # number of nodes for Y
dat.list <- gen.data.beta(
n = n, q = q, B = B, s2 = s2,
x.thetas = x.thetas, x.gamma = x.gamma, c.gamma = c.gamma)
datf <- dat.list$datf          # full data
dat0 <- dat.list$dat0          # oracle data
dat <- dat.list$dat            # observed data
datcc <- dat.list$datcc        # complete case data
zs <- sort(unique(dat$Z))      # unique z values
# plot generated data
ggplot(datf,
aes(x = X,
y = Y,
color = factor(Z))) +
geom_point() +
labs(color = "Z") +
ggtitle("Oracle Data")
ggplot(datcc,
aes(x = W,
y = Y,
color = factor(Z))) +
geom_point() +
labs(color = "Z") +
ggtitle("Complete Case Data")
# parameters for spline model
m.knots <- 5
deg <- 3
# fit spline model and extract estimated density
tic("fit spline model")
spline.res <- fit.spline(dat = dat, m.knots = m.knots, deg = deg)
###############################################################################
###############################################################################
# MLE B-spline Implementation
# Brian Richardson
# 2024-06-21
# Purpose: develop B-spline model for X|Z
###############################################################################
###############################################################################
# prep workspace ----------------------------------------------------------
rm(list = ls())
#setwd(dirname(getwd()))
library(statmod)
library(devtools)
library(ggplot2)
library(zipfR)
library(splines2)
library(nloptr)
library(tictoc)
load_all()
# define parameters -------------------------------------------------------
set.seed(3)
n <- 8000             # sample size
q <- 0.8              # censoring proportion
B <- c(1, 10, 2)      # beta
s2 <- 2               # variance of Y|X,Z
ls2 <- log(2)
x.thetas <- c(0.5, -0.5)   # theta parameters for X|Z
x.gamma <- 1          # gamma parameter for X|Z
c.gamma <- 2          # gamma parameter for C|Z
mx <- 40                   # number of nodes for X
my <- 5                    # number of nodes for Y
# generate data -----------------------------------------------------------
dat.list <- gen.data.beta(
n = n, q = q, B = B, s2 = s2,
x.thetas = x.thetas, x.gamma = x.gamma, c.gamma = c.gamma)
datf <- dat.list$datf          # full data
dat0 <- dat.list$dat0          # oracle data
dat <- dat.list$dat            # observed data
datcc <- dat.list$datcc        # complete case data
zs <- sort(unique(dat$Z))      # unique z values
# plot generated data
ggplot(datf,
aes(x = X,
y = Y,
color = factor(Z))) +
geom_point() +
labs(color = "Z") +
ggtitle("Oracle Data")
ggplot(datcc,
aes(x = W,
y = Y,
color = factor(Z))) +
geom_point() +
labs(color = "Z") +
ggtitle("Complete Case Data")
# estimate X|Z density using Splines --------------------------------------
# parameters for spline model
m.knots <- 5
deg <- 3
# fit spline model and extract estimated density
tic("fit spline model")
spline.res <- fit.spline(dat = dat, m.knots = m.knots, deg = deg)
toc()
eta1.hat <- spline.res$dens
alpha.hat <- spline.res$alpha
theta.hat <- spline.res$theta
logf <- spline.res$glogf
glogf <- spline.res$glogf
wts <- spline.res$wts
knots <- spline.res$knots
# plot results
datf %>%
mutate(eta1.hat = eta1.hat(x = X, z = Z),
Z = factor(Z)) %>%
ggplot() +
geom_line(aes(x = X,
y = eta1.hat,
color = Z)) +
geom_histogram(aes(x = X,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
datcc %>%
mutate(Z = factor(Z)) %>%
ggplot() +
geom_histogram(aes(x = W,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
datcc %>%
mutate(eta1.hat = eta1.hat(x = X, z = Z),
Z = factor(Z)) %>%
ggplot() +
geom_histogram(aes(x = W,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
datcc %>%
mutate(eta1.hat = eta1.hat(x = W, z = Z),
Z = factor(Z)) %>%
ggplot() +
geom_histogram(aes(x = W,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
datcc %>%
mutate(eta1.hat = eta1.hat(x = W, z = Z),
Z = factor(Z)) %>%
ggplot() +
geom_line(aes(x = W,
y = eta1.hat,
color = Z)) +
geom_histogram(aes(x = W,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
# plot results
datf %>%
mutate(eta1.hat = eta1.hat(x = X, z = Z),
Z = factor(Z)) %>%
ggplot() +
geom_line(aes(x = X,
y = eta1.hat,
color = Z)) +
geom_histogram(aes(x = X,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
datcc %>%
mutate(eta1.hat = eta1.hat(x = W, z = Z),
Z = factor(Z)) %>%
ggplot() +
geom_line(aes(x = W,
y = eta1.hat,
color = Z)) +
geom_histogram(aes(x = W,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
m.knots <- 10
deg <- 3
# fit spline model and extract estimated density
tic("fit spline model")
spline.res <- fit.spline(dat = dat, m.knots = m.knots, deg = deg)
toc()
eta1.hat <- spline.res$dens
alpha.hat <- spline.res$alpha
theta.hat <- spline.res$theta
logf <- spline.res$glogf
glogf <- spline.res$glogf
wts <- spline.res$wts
knots <- spline.res$knots
# plot results
datf %>%
mutate(eta1.hat = eta1.hat(x = X, z = Z),
Z = factor(Z)) %>%
ggplot() +
geom_line(aes(x = X,
y = eta1.hat,
color = Z)) +
geom_histogram(aes(x = X,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
datcc %>%
mutate(eta1.hat = eta1.hat(x = W, z = Z),
Z = factor(Z)) %>%
ggplot() +
geom_line(aes(x = W,
y = eta1.hat,
color = Z)) +
geom_histogram(aes(x = W,
y = after_stat(density),
fill = Z),
alpha = 0.5,
bins = 30) +
facet_grid(~Z) +
theme(legend.position = "none")
