rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(devtools)
library(kableExtra)
library(scales)
## load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/sim4/sd",
clust, ".csv")))
})
setwd("C:/Users/brich/OneDrive - University of North Carolina at Chapel Hill/Desktop/CIRL/RINI/simulation")
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(devtools)
library(kableExtra)
library(scales)
## load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0("sim_data/sim4/sd",
clust, ".csv")))
})
## combine simulation results into 1 data frame
sim.res <- bind_rows(sim.out.list) %>%
mutate(pval = value,
Stat1 = factor(substr(tstat, 2, 2),
levels = c(3, 2, 1),
labels = c("Either", "Current", "Previous")),
Stat2 = factor(substr(tstat, 3, 3),
levels = 1:3,
labels = paste0(c("Between", "From", "To"),
"\nInfected")),
Test = gsub("rho.", "", ptype),
Test = factor(Test,
levels = c("sharp", "oracle", "plug", "adj")),
H0 = factor(paste0(as.numeric(H0A), as.numeric(H0Y)),
levels = c("11", "01", "00")),
null = case_when(
Test == "sharp" & H0 %in% c("01", "00") ~ 1,
Test %in% c("oracle", "plug", "adj") & H0 == "00" ~ 1,
.default = 0))
H0_labels <- c(
"11" = "H[0]^{`#`}",
"01" = "bar(H)[0]^A * \"∩\" * H[0]^Y",
"00" = "bar(H)[0]^A * \"∩\" * bar(H)[0]^Y")
test_labels <- c(
"sharp" = "rho[B](T, H[0]^{`#`})",
"oracle" = "rho[B](T, H[0]^Y)",
"plug" = "hat(rho)[B](T, H[0]^Y)",
"adj" = "tilde(rho)[B](T, H[0]^Y)")
n.reps <- n_distinct(sim.res$seed)
## plots by test statistic
for (stat in levels(factor(sim.res$tstat))) {
## summarize power
power_df <- sim.res %>%
filter(tstat == stat) %>%
group_by(Test, H0, null) %>%
summarise(power = mean(pval < 0.05),
.groups = "drop") %>%
mutate(label = paste0("power = ",
sprintf("%.1f", 100 * power), "%"),
x = 0.5,
y = Inf)
## shaded rectangles for true nulls
bg_rects <- sim.res %>%
distinct(Test, H0, null) %>%
filter(null == 0) %>%
mutate(xmin = -Inf, xmax = Inf,
ymin = -Inf, ymax = Inf)
## create plot
ggplot(filter(sim.res, tstat == stat),
aes(x = pval)) +
geom_rect(data = bg_rects,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
inherit.aes = FALSE,
fill = "gray") +  # Light gray background
geom_histogram(bins = 20,
color = "black",
fill = "black") +
facet_grid(Test ~ H0,
labeller = labeller(H0 = as_labeller(H0_labels, label_parsed),
Test = as_labeller(test_labels, label_parsed)),
scales = "free") +
geom_vline(xintercept = 0.05,
color = "blue") +
geom_text(data = power_df,
aes(x = x,
y = y,
label = label),
vjust = 1.5,
inherit.aes = FALSE) +
theme_bw() +
theme(axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank()) +
labs(x = "p-value") +
scale_x_continuous(breaks = seq(0, 1, by = 0.2)) +
ggtitle(paste0("Distribution of P-Values using Test Statistic ", stat),
subtitle = paste0("Based on ", n.reps, " Simulations"))
## save image
ggsave(paste0("sim_figures/sim4_fig_", stat, ".png"),
dpi = 300, width = 5, height = 6)
}
rm(list = ls())
rm(list = ls())
rm(list = ls())
library(dplyr)
library(ggplot2)
library(devtools)
library(fitdistrplus)
library(MASS)
library(statmod)
library(tictoc)
library(here)
setwd(here())
load_all(paste0(dirname(getwd()), "/sparcc"))
setwd("C:/Users/brich/OneDrive - University of North Carolina at Chapel Hill/Desktop/Garcia Lab/Research/Projects-Active/HDSP/sparcc")
setwd("C:/Users/brich/OneDrive - University of North Carolina at Chapel Hill/Desktop/Garcia Lab/Research/Projects-Active/HDSP/sparcc/fake_data_analysis")
load_all(paste0(dirname(getwd()), "/sparcc"))
setwd("C:/Users/brich/OneDrive - University of North Carolina at Chapel Hill/Desktop/Garcia Lab/Research/Projects-Active/HDSP/sparcc/fake_data_analysis")
paste0(dirname(getwd()), "/sparcc")
dirname(getwd())
getwd()
load_all(dirname(getwd()))
library(here)
setwd(here())
load_all(dirname(getwd()))
setwd("C:/Users/brich/OneDrive - University of North Carolina at Chapel Hill/Desktop/Garcia Lab/Research/Projects-Active/HDSP/sparcc/fake_data_analysis")
load_all(dirname(getwd()))
datf <- read.csv("derived-data/datf_tms.csv")
dat <- read.csv("derived-data/dat_tms.csv")
packageVersion("dplyr")
packageVersion("statmod")
* `dplyr` (version 1.1.4)
packageVersion("ggplot2")
packageVersion("numDeriv")
packageVersion("zipdR")
packageVersion("zipfR")
packageVersion("fitdistrplus")
install.packages("ggthemes")
knitr::opts_chunk$set(echo = TRUE)
## load the package
library(sparcc)
## install the package
devtools::install_git(
url = "https://anonymous.4open.science/r/sparcc-E032",
ref = "main"
)
## install the package
devtools::install_url("https://anonymous.4open.science/r/sparcc-E032/sparcc-main.zip")
## install the package
devtools::install_url("https://anonymous.4open.science/r/sparcc-E032/sparcc-main.zip")
## install the package
devtools::install_url("https://anonymous.4open.science/anonymize/sparcc-E032")
knitr::opts_chunk$set(echo = TRUE)
## load the package
library(devtools)
load_all()
knitr::opts_chunk$set(echo = TRUE)
## load the package
library(devtools)
load_all()
## other necessary packages
library(dplyr)
library(ggplot2)
library(statmod)
## define parameters
set.seed(123)                 # random number seed for reproducibility
n <- 800                      # sample size
q <- 0.6                      # censoring proportion
B <- c(1, 10, 2)              # outcome model parameters
s2 <- 1                       # Var(Y|X,Z)
x.thetas <- 0.5 * c(-1, 1)    # parameters governing X|Z and C|Z
x.gamma <- 1
c.gamma <- 2
## generate data
dat.list <- gen.data.beta(
n = n, q = q, B = B, s2 = s2,
x.thetas = x.thetas, x.gamma = x.gamma, c.gamma)
datf <- dat.list$datf          # full data
dat0 <- dat.list$dat0          # oracle data
dat <- dat.list$dat            # observed data
datcc <- dat.list$datcc        # complete case data
zs <- sort(unique(dat$Z))      # unique z values
