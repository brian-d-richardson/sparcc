make.est.plot <- function(param., q. = 10000) {
sim.out.long %>%
filter(param == param.,
q == q.) %>%
ggplot(aes(y = estimate,
color = method,
fill = method)) +
geom_boxplot() +
geom_hline(aes(yintercept = B.true),
linetype = "dashed",
linewidth = 0.6,
color = pal_light[4]) +
facet_nested(n ~ specify.x.gamma + specify.c.gamma,
scales = "free",
labeller = labeller(n = n.labs,
specify.x.gamma = specx.labs,
specify.c.gamma = specc.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates for ",
param.labs[param.]),
subtitle = paste0("censoring proportion q = ", q., "; ",
"mx = ", mx, "; ",
"mc = ", mc, "; ",
"my = ", my, "; ",
n.rep, " replicates per setting")) +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_manual(values = pal_light[c(1, 2, 3, 6)],
labels = method.labs) +
scale_color_manual(values = pal_dark[c(1, 2, 3, 6)],
labels = method.labs)
}
make.est.plot(param. = 1, q. = q[1])
sim.out.long %>%
filter(#param == param.,
q == q.) %>%
ggplot(aes(y = estimate,
color = method,
fill = method)) +
geom_boxplot() +
geom_hline(aes(yintercept = B.true),
linetype = "dashed",
linewidth = 0.6,
color = pal_light[4]) +
facet_nested(param ~ specify.x.gamma + specify.c.gamma,
scales = "free",
labeller = labeller(n = n.labs,
specify.x.gamma = specx.labs,
specify.c.gamma = specc.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates for ",
param.labs[param.]),
subtitle = paste0("censoring proportion q = ", q., "; ",
"mx = ", mx, "; ",
"mc = ", mc, "; ",
"my = ", my, "; ",
n.rep, " replicates per setting")) +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_manual(values = pal_light[c(1, 2, 3, 6)],
labels = method.labs) +
scale_color_manual(values = pal_dark[c(1, 2, 3, 6)],
labels = method.labs)
# boxplot of simulated estimates
make.est.plot <- function(param., q. = 10000) {
sim.out.long %>%
filter(#param == param.,
q == q.) %>%
ggplot(aes(y = estimate,
color = method,
fill = method)) +
geom_boxplot() +
geom_hline(aes(yintercept = B.true),
linetype = "dashed",
linewidth = 0.6,
color = pal_light[4]) +
facet_nested(param ~ specify.x.gamma + specify.c.gamma,
scales = "free",
labeller = labeller(n = n.labs,
specify.x.gamma = specx.labs,
specify.c.gamma = specc.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates for ",
param.labs[param.]),
subtitle = paste0("censoring proportion q = ", q., "; ",
"mx = ", mx, "; ",
"mc = ", mc, "; ",
"my = ", my, "; ",
n.rep, " replicates per setting")) +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_manual(values = pal_light[c(1, 2, 3, 6)],
labels = method.labs) +
scale_color_manual(values = pal_dark[c(1, 2, 3, 6)],
labels = method.labs)
}
make.est.plot(param. = 1, q. = q[1])
# boxplot of simulated estimates
make.est.plot <- function(param., q.) {
sim.out.long %>%
filter(param == param.,
q == q.) %>%
ggplot(aes(y = estimate,
color = method,
fill = method)) +
geom_boxplot() +
geom_hline(aes(yintercept = B.true),
linetype = "dashed",
linewidth = 0.6,
color = pal_light[4]) +
facet_nested(n ~ specify.x.gamma + specify.c.gamma,
scales = "free",
labeller = labeller(n = n.labs,
specify.x.gamma = specx.labs,
specify.c.gamma = specc.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates for ",
param.labs[param.]),
subtitle = paste0("censoring proportion q = ", q., "; ",
"mx = ", mx, "; ",
"mc = ", mc, "; ",
"my = ", my, "; ",
n.rep, " replicates per setting")) +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_manual(values = pal_light[c(1, 2, 3, 6)],
labels = method.labs) +
scale_color_manual(values = pal_dark[c(1, 2, 3, 6)],
labels = method.labs)
}
# boxplot of simulated estimates
make.est.plot <- function(param., q.) {
sim.out.long %>%
filter(param == param.,
q == q.) %>%
ggplot(aes(y = estimate,
color = method,
fill = method)) +
geom_boxplot() +
geom_hline(aes(yintercept = B.true),
linetype = "dashed",
linewidth = 0.6,
color = pal_light[4]) +
facet_nested(n ~ specify.x.gamma + specify.c.gamma,
scales = "free",
labeller = labeller(n = n.labs,
specify.x.gamma = specx.labs,
specify.c.gamma = specc.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates for ",
param.labs[param.]),
subtitle = paste0("censoring proportion q = ", q., "; ",
"mx = ", mx, "; ",
"mc = ", mc, "; ",
"my = ", my, "; ",
n.rep, " replicates per setting")) +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_manual(values = pal_light[c(1, 2, 3, 6)],
labels = method.labs) +
scale_color_manual(values = pal_dark[c(1, 2, 3, 6)],
labels = method.labs)
}
make.est.plot(param. = 1, q. = q[1])
make.est.plot(param. = 2, q. = q[1])
make.est.plot(param. = 3, q. = q[1])
# boxplot of simulated estimates
make.est.plot <- function(param., q.) {
sim.out.long %>%
filter(param == param.,
q == q.) %>%
ggplot(aes(y = estimate,
color = method,
fill = method)) +
geom_boxplot() +
geom_hline(aes(yintercept = B.true),
linetype = "dashed",
linewidth = 0.6,
color = pal_light[4]) +
facet_nested(n ~ specify.x.gamma + specify.c.gamma,
scales = "free",
labeller = labeller(n = n.labs,
specify.x.gamma = specx.labs,
specify.c.gamma = specc.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates for ",
param.labs[param.]),
subtitle = paste0("censoring proportion q = ", q., "; ",
n.rep, " replicates per setting")) +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_manual(values = pal_light[c(1, 2, 3, 6)],
labels = method.labs) +
scale_color_manual(values = pal_dark[c(1, 2, 3, 6)],
labels = method.labs)
}
make.est.plot(param. = 1, q. = q[1])
make.est.plot(param. = 2, q. = q[1])
make.est.plot(param. = 3, q. = q[1])
make.est.plot(param. = 1, q. = q[2])
make.est.plot(param. = 2, q. = q[2])
make.est.plot(param. = 3, q. = q[2])
make.est.plot(param. = 1, q. = q[2])
make.est.plot(param. = 2, q. = q[2])
make.est.plot(param. = 3, q. = q[2])
# filter out MLE outliers
make.est.plot(param. = 1, q. = q[2]) + ylim(0.95, 1.05)
make.est.plot(param. = 2, q. = q[2]) + ylim(0, 0.4)
make.est.plot(param. = 3, q. = q[2]) + ylim(-2.5, -2.3)
q[2]
# filter out MLE outliers
make.est.plot(param. = 1, q. = q[2]) + ylim(0.95, 1.05)
make.est.plot(param. = 2, q. = q[2]) + ylim(0, 0.4)
make.est.plot(param. = 3, q. = q[2]) + ylim(-2.5, -2.3)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true (beta, log s2)
B <- c(1, 0.2, log(0.09))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim_data/sim0/fine_search_1/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- gsub(".B", "", colnames(sim.out))
# make long data frame
sim.out.long <- sim.out %>%
select(!B2) %>%
pivot_longer(cols = starts_with("B"),
names_to = "method.param",
values_to = "estimate") %>%
mutate(method = factor(substr(method.param, 2, 3),
levels = c("or", "cc", "ml", "sp")),
specify.x.gamma = factor(specify.x.gamma,
levels = c(1, 0)),
specify.c.gamma = factor(specify.c.gamma,
levels = c(1, 0)),
param = factor(substr(method.param, 4, 4)),
B.true = B[param])
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, specify.x.gamma, specify.c.gamma, method) %>%
summarize(prop.error = mean(is.na(estimate))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
# extract simulation parameters
q <- unique(sim.out$q)
n <- unique(sim.out$n)
specify.x.gamma <- unique(sim.out$specify.x.gamma)
specify.c.gamma <- unique(sim.out$specify.c.gamma)
mx <- unique(sim.out$mx)
mc <- unique(sim.out$mc)
my <- unique(sim.out$my)
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, q, n, specify.x.gamma, specify.c.gamma, mx, mc, my))
# make labels for plots
method.labs <- c("Oracle",
"Complete Case",
"Parametric MLE",
"Semiparametric")
names(method.labs) <- c("or", "cc", "ml", "sp")
q.labs <- paste0("q = ", q)
names(q.labs) <- q
n.labs <- paste0("n = ", n)
names(n.labs) <- n
specx.labs <- c("X Correct", "X Incorrect")
names(specx.labs) <- specify.x.gamma
specc.labs <- c("C Correct", "C Incorrect")
names(specc.labs) <- specify.c.gamma
mx.labs <- paste0("mx = ", mx)
names(mx.labs) <- mx
mc.labs <- paste0("mc = ", mc)
names(mc.labs) <- mc
my.labs <- paste0("my = ", my)
names(my.labs) <- my
param.labs <- c("\u03B20", "\u03B21", "log\u03C3\u00B2")
# colorblind friendly pallette
#pal_light <- cbbPalette <- c('#BBBBBB', '#228833', '#4477AA', '#AA3377')
#pal_dark <- cbbPalette <- c('#5d5d5d', '#114419', '#223b55', '#55193b')
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# boxplot of simulated estimates
make.est.plot <- function(param., q.) {
sim.out.long %>%
filter(param == param.,
q == q.) %>%
ggplot(aes(y = estimate,
color = method,
fill = method)) +
geom_boxplot() +
geom_hline(aes(yintercept = B.true),
linetype = "dashed",
linewidth = 0.6,
color = pal_light[4]) +
facet_nested(n ~ specify.x.gamma + specify.c.gamma,
scales = "free",
labeller = labeller(n = n.labs,
specify.x.gamma = specx.labs,
specify.c.gamma = specc.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates for ",
param.labs[param.]),
subtitle = paste0("censoring proportion q = ", q., "; ",
n.rep, " replicates per setting")) +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_manual(values = pal_light[c(1, 2, 3, 6)],
labels = method.labs) +
scale_color_manual(values = pal_dark[c(1, 2, 3, 6)],
labels = method.labs)
}
make.est.plot(param. = 1, q. = q[1])
make.est.plot(param. = 2, q. = q[1])
make.est.plot(param. = 3, q. = q[1])
make.est.plot(param. = 1, q. = q[2])
make.est.plot(param. = 2, q. = q[2])
make.est.plot(param. = 3, q. = q[2])
# filter out MLE outliers
make.est.plot(param. = 1, q. = q[2]) + ylim(0.95, 1.05)
make.est.plot(param. = 2, q. = q[2]) + ylim(0, 0.4)
make.est.plot(param. = 3, q. = q[2]) + ylim(-2.5, -2.3)
make.est.plot(param. = 1, q. = q[1])
make.est.plot(param. = 2, q. = q[1])
make.est.plot(param. = 3, q. = q[1])
make.est.plot(param. = 1, q. = q[1]) + ylim(0, 2)
make.est.plot(param. = 1, q. = q[1]) + ylim(0.9, 1.1)
make.est.plot(param. = 1, q. = q[1]) + ylim(0.95, 1.05)
make.est.plot(param. = 2, q. = q[1]) + ylim(0, 0.4)
q[1]
make.est.plot(param. = 3, q. = q[1]) + ylim(-1, 1)
make.est.plot(param. = 3, q. = q[1]) + ylim(-3, -1)
make.est.plot(param. = 3, q. = q[1]) + ylim(-2.5, -2.2)
make.est.plot(param. = 3, q. = q[1]) + ylim(-2.5, -2.3)
# filter out MLE outliers
make.est.plot(param. = 1, q. = q[2]) + ylim(0.95, 1.05)
make.est.plot(param. = 2, q. = q[2]) + ylim(0, 0.4)
make.est.plot(param. = 3, q. = q[2]) + ylim(-2.5, -2.3)
make.est.plot(param. = 2, q. = q[2]) + ylim(-0.2, 0.6)
View(sim.out)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true (beta, log s2)
B <- c(1, 0.2, log(0.09))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim_data/sim1/fine_search_5/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- gsub(".B", "", colnames(sim.out))
# make long data frame
sim.out.long <- sim.out %>%
select(!B2) %>%
pivot_longer(cols = starts_with("B"),
names_to = "method.param",
values_to = "estimate") %>%
mutate(method = factor(substr(method.param, 2, 3),
levels = c("or", "cc", "ml", "sp")),
specify.x.gamma = factor(specify.x.gamma,
levels = c(1, 0)),
specify.c.gamma = factor(specify.c.gamma,
levels = c(1, 0)),
param = factor(substr(method.param, 4, 4)),
B.true = B[param])
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, specify.x.gamma, specify.c.gamma, method) %>%
summarize(prop.error = mean(is.na(estimate))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
# extract simulation parameters
q <- unique(sim.out$q)
n <- unique(sim.out$n)
specify.x.gamma <- unique(sim.out$specify.x.gamma)
specify.c.gamma <- unique(sim.out$specify.c.gamma)
mx <- unique(sim.out$mx)
mc <- unique(sim.out$mc)
my <- unique(sim.out$my)
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, q, n, specify.x.gamma, specify.c.gamma, mx, mc, my))
# make labels for plots
method.labs <- c("Oracle",
"Complete Case",
"Parametric MLE",
"Semiparametric")
names(method.labs) <- c("or", "cc", "ml", "sp")
q.labs <- paste0("q = ", q)
names(q.labs) <- q
n.labs <- paste0("n = ", n)
names(n.labs) <- n
specx.labs <- c("X Correct", "X Incorrect")
names(specx.labs) <- specify.x.gamma
specc.labs <- c("C Correct", "C Incorrect")
names(specc.labs) <- specify.c.gamma
mx.labs <- paste0("mx = ", mx)
names(mx.labs) <- mx
mc.labs <- paste0("mc = ", mc)
names(mc.labs) <- mc
my.labs <- paste0("my = ", my)
names(my.labs) <- my
param.labs <- c("\u03B20", "\u03B21", "log\u03C3\u00B2")
# colorblind friendly pallette
#pal_light <- cbbPalette <- c('#BBBBBB', '#228833', '#4477AA', '#AA3377')
#pal_dark <- cbbPalette <- c('#5d5d5d', '#114419', '#223b55', '#55193b')
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# boxplot of simulated estimates
make.est.plot <- function(param., q., est_cutoff = Inf) {
sim.out.long %>%
filter(param == param.,
q == q.,
abs(estimate - B.true) < est_cutoff) %>%
ggplot(aes(y = estimate,
color = method,
fill = method)) +
geom_boxplot() +
geom_hline(aes(yintercept = B.true),
linetype = "dashed",
linewidth = 0.6,
color = pal_light[4]) +
facet_nested(n ~ specify.x.gamma + specify.c.gamma,
scales = "free",
labeller = labeller(n = n.labs,
specify.x.gamma = specx.labs,
specify.c.gamma = specc.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates for ",
param.labs[param.]),
subtitle = paste0("censoring proportion q = ", q., "; ",
n.rep, " replicates per setting")) +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_manual(values = pal_light[c(1, 2, 3, 6)],
labels = method.labs) +
scale_color_manual(values = pal_dark[c(1, 2, 3, 6)],
labels = method.labs)
}
make.est.plot(param. = 1, q. = q[1])
make.est.plot(param. = 2, q. = q[1])
make.est.plot(param. = 3, q. = q[1])
make.est.plot(param. = 1, q. = q[1], est_cutoff = 0.6)
make.est.plot(param. = 2, q. = q[1], est_cutoff = 1)
make.est.plot(param. = 3, q. = q[1], est_cutoff = 1.5)
make.est.plot(param. = 1, q. = q[2])
make.est.plot(param. = 2, q. = q[2])
make.est.plot(param. = 3, q. = q[2])
make.est.plot(param. = 1, q. = q[2], est_cutoff = 0.2)
make.est.plot(param. = 1, q. = q[2], est_cutoff = 0.15)
make.est.plot(param. = 2, q. = q[2], est_cutoff = 0.5)
make.est.plot(param. = 3, q. = q[2], est_cutoff = 0.5)
make.est.plot(param. = 1, q. = q[2], est_cutoff = 0.15)
make.est.plot(param. = 2, q. = q[2], est_cutoff = 0.5)
make.est.plot(param. = 3, q. = q[2], est_cutoff = 0.5)
View(sim.out.long)
