Sml <- get.Sml(dat = dat, B = B, s2 = s2,
args = list(mu = mu, d.mu = d.mu, SF = SF, fy = fy,
x.nds = x.nds, x.wts = x.wts),
return.sums = F)
assess.ee(Sml)
# semiparametric efficient score
Seff <- get.Seff(dat = dat, B = B, s2 = s2,
args = list(mu = mu, d.mu = d.mu, SF = SF, fy = fy, eta1 = eta1,
x.nds = x.nds, x.wts = x.wts,
c.nds = c.nds, c.wts = c.wts,
y.nds = y.nds, y.wts = y.wts),
return.sums = F)
assess.ee(Seff)
# complete case lm to get starting value
naive.lm <- lm(Y ~ W + Z, data = datcc)
# complete case
Bcc <- get.root(dat = dat, score = get.Scc,
start = c(naive.lm$coef, log(var(naive.lm$resid))))
Bcc
# oracle
B0 <- get.root(dat = dat0, score = get.Scc,
start = Bcc)
B0
# MLE
Bmle <- get.root(dat = dat, score = get.Sml, start = Bcc,
args = list(mu = mu, d.mu = d.mu, SF = SF, fy = fy,
x.nds = x.nds, x.wts = x.wts))
Bmle
# semiparametric efficient score
Beff <- get.root(dat = dat, score = get.Seff, start = Bcc,
args = list(mu = mu, d.mu = d.mu, SF = SF, fy = fy,
eta1 = eta1,
x.nds = x.nds, x.wts = x.wts,
c.nds = c.nds, c.wts = c.wts,
y.nds = y.nds, y.wts = y.wts))
Beff
# compare estimates
rbind(c(B, log(s2)), B0, Bcc, Bmle, Beff)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true (beta0, beta2)
B13 <- c(1, 10, 2, log(4))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim2_data/v5/sd",
clust, ".csv")))
})
# true (beta0, beta2)
B13 <- c(1, 10, 2, log(4))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim2_data/v5/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- gsub(".B", "", colnames(sim.out))
colnames(sim.out) <- gsub("B2", "trueB2", colnames(sim.out))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("B"),
names_to = "method.param",
values_to = "estimate") %>%
mutate(method = factor(substr(method.param, 2, 3),
levels = c("or", "cc", "ml", "sp")),
x.correct = factor(x.correct,
levels = c(1, 0)),
c.correct = factor(c.correct,
levels = c(1, 0)),
param = factor(substr(method.param, 4, 4)),
B.true = ifelse(param == 2, trueB2,
ifelse(param == 4, log(s2),
B13[param])))
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, x.correct, c.correct, method, trueB2, s2) %>%
summarize(prop.error = mean(is.na(estimate))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
# extract simulation parameters
q <- unique(sim.out$q)
n <- unique(sim.out$n)
s2 <- unique(sim.out$s2)
trueB2 <- unique(sim.out$trueB2)
x.correct <- unique(sim.out$x.correct)
c.correct <- unique(sim.out$c.correct)
mx <- unique(sim.out$mx)
mc <- unique(sim.out$mc)
my <- unique(sim.out$my)
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, q, n, x.correct, c.correct,
mx, mc, my, s2, trueB2))
# make labels for plots
method.labs <- c("Oracle",
"Complete Case",
"Parametric MLE",
"Semiparametric")
names(method.labs) <- c("or", "cc", "ml", "sp")
q.labs <- paste0("q = ", q)
names(q.labs) <- q
n.labs <- paste0("n = ", n)
names(n.labs) <- n
s2.labs <- paste0("s2 = ", s2)
names(s2.labs) <- s2
trueB2.labs <- paste0("B2 = ", trueB2)
names(trueB2.labs) <- trueB2
specx.labs <- c("X Correct", "X Incorrect")
names(specx.labs) <- x.correct
specc.labs <- c("C Correct", "C Incorrect")
names(specc.labs) <- c.correct
mx.labs <- paste0("mx = ", mx)
names(mx.labs) <- mx
mc.labs <- paste0("mc = ", mc)
names(mc.labs) <- mc
my.labs <- paste0("my = ", my)
names(my.labs) <- my
param.labs <- c("\u03B20", "\u03B21", "\u03B22", "log\u03C3\u00B2")
# colorblind friendly pallette
#pal_light <- cbbPalette <- c('#BBBBBB', '#228833', '#4477AA', '#AA3377')
#pal_dark <- cbbPalette <- c('#5d5d5d', '#114419', '#223b55', '#55193b')
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# boxplot of simulated estimates
make.est.plot <- function(param., est_cutoff = Inf,
q. = q, trueB2. = trueB2, s2. = s2) {
sim.out.long %>%
filter(param == param.,
trueB2 %in% trueB2.,
s2 %in% s2.,
q %in% q.,
abs(estimate - B.true) < est_cutoff) %>%
ggplot(aes(y = estimate,
color = method,
fill = method)) +
geom_boxplot() +
geom_hline(aes(yintercept = B.true),
linetype = "dashed",
linewidth = 0.6,
color = pal_light[4]) +
facet_nested(q + s2 ~ x.correct + c.correct,
scales = "free",
labeller = labeller(n = n.labs,
q = q.labs,
trueB2 = trueB2.labs,
s2 = s2.labs,
x.correct = specx.labs,
c.correct = specc.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates for ",
param.labs[param.]),
subtitle = paste0(#"true B2 = ", trueB2., "; ",
#"s2 = ", s2., "; ",
#"censoring proportion q = ", q., "; ",
n.rep, " replicates per setting")) +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_manual(values = pal_light[c(1, 2, 3, 5, 6)],
labels = method.labs) +
scale_color_manual(values = pal_dark[c(1, 2, 3, 5, 6)],
labels = method.labs)
}
make.est.plot(param. = 1, q = 0.8)
make.est.plot(param. = 2, q = 0.8)
make.est.plot(param. = 3, q = 0.8)
make.est.plot(param. = 4, q = 0.8)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true (beta0, beta2)
B13 <- c(1, 10, 2, log(4))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim2_data/v5/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- gsub(".B", "", colnames(sim.out))
colnames(sim.out) <- gsub("B2", "trueB2", colnames(sim.out))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("B"),
names_to = "method.param",
values_to = "estimate") %>%
mutate(method = factor(substr(method.param, 2, 3),
levels = c("or", "cc", "ml", "sp")),
x.correct = factor(x.correct,
levels = c(1, 0)),
c.correct = factor(c.correct,
levels = c(1, 0)),
param = factor(substr(method.param, 4, 4)),
B.true = ifelse(param == 2, trueB2,
ifelse(param == 4, log(s2),
B13[param])))
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, x.correct, c.correct, method, trueB2, s2) %>%
summarize(prop.error = mean(is.na(estimate))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
# extract simulation parameters
q <- unique(sim.out$q)
n <- unique(sim.out$n)
s2 <- unique(sim.out$s2)
trueB2 <- unique(sim.out$trueB2)
x.correct <- unique(sim.out$x.correct)
c.correct <- unique(sim.out$c.correct)
mx <- unique(sim.out$mx)
mc <- unique(sim.out$mc)
my <- unique(sim.out$my)
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, q, n, x.correct, c.correct,
mx, mc, my, s2, trueB2))
# make labels for plots
method.labs <- c("Oracle",
"Complete Case",
"Parametric MLE",
"Semiparametric")
names(method.labs) <- c("or", "cc", "ml", "sp")
q.labs <- paste0("q = ", q)
names(q.labs) <- q
n.labs <- paste0("n = ", n)
names(n.labs) <- n
s2.labs <- paste0("s2 = ", s2)
names(s2.labs) <- s2
trueB2.labs <- paste0("B2 = ", trueB2)
names(trueB2.labs) <- trueB2
specx.labs <- c("X Correct", "X Incorrect")
names(specx.labs) <- x.correct
specc.labs <- c("C Correct", "C Incorrect")
names(specc.labs) <- c.correct
mx.labs <- paste0("mx = ", mx)
names(mx.labs) <- mx
mc.labs <- paste0("mc = ", mc)
names(mc.labs) <- mc
my.labs <- paste0("my = ", my)
names(my.labs) <- my
param.labs <- c("\u03B20", "\u03B21", "\u03B22", "log\u03C3\u00B2")
# colorblind friendly pallette
#pal_light <- cbbPalette <- c('#BBBBBB', '#228833', '#4477AA', '#AA3377')
#pal_dark <- cbbPalette <- c('#5d5d5d', '#114419', '#223b55', '#55193b')
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# boxplot of simulated estimates
make.est.plot <- function(param., est_cutoff = Inf,
q. = q, trueB2. = trueB2, s2. = s2) {
sim.out.long %>%
filter(param == param.,
trueB2 %in% trueB2.,
s2 %in% s2.,
q %in% q.,
abs(estimate - B.true) < est_cutoff) %>%
ggplot(aes(y = estimate,
color = method,
fill = method)) +
geom_boxplot() +
geom_hline(aes(yintercept = B.true),
linetype = "dashed",
linewidth = 0.6,
color = pal_light[4]) +
facet_nested(q + s2 ~ x.correct + c.correct,
scales = "free",
labeller = labeller(n = n.labs,
q = q.labs,
trueB2 = trueB2.labs,
s2 = s2.labs,
x.correct = specx.labs,
c.correct = specc.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates for ",
param.labs[param.]),
subtitle = paste0(#"true B2 = ", trueB2., "; ",
#"s2 = ", s2., "; ",
#"censoring proportion q = ", q., "; ",
n.rep, " replicates per setting")) +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_manual(values = pal_light[c(1, 2, 3, 5, 6)],
labels = method.labs) +
scale_color_manual(values = pal_dark[c(1, 2, 3, 5, 6)],
labels = method.labs)
}
make.est.plot(param. = 1, q = 0.8)
make.est.plot(param. = 2, q = 0.8)
make.est.plot(param. = 3, q = 0.8)
make.est.plot(param. = 4, q = 0.8)
make.est.plot(param. = 1, q = 0.8, s2 = 2)
make.est.plot(param. = 1, q = 0.8, s2 = s2[1])
make.est.plot(param. = 2, q = 0.8, s2 = s2[1])
make.est.plot(param. = 3, q = 0.8, s2 = s2[1])
make.est.plot(param. = 4, q = 0.8, s2 = s2[1])
# table summarizing for only beta2, and for q = 0.8
tbl2 <- sim.out.long %>%
filter(param == 2,
q == 0.8) %>%
group_by(n, q, x.correct, c.correct, method) %>%
summarise(Bias = 100*mean(estimate - B.true, na.rm = T),
Variance = 100*sd(estimate, na.rm = T),
MSE = 100*mean((estimate - B.true) ^ 2, na.rm = T)) %>%
gather(key, value, Bias:MSE) %>%
unite(Group, c(x.correct, c.correct), key) %>%
spread(Group, value)
setNames(tbl2, sub(".+_", "", names(tbl2))) %>%
kable(digits = 1) %>%
kable_styling("striped") %>%
add_header_above(c(" " = 3,
"Neither" = 3,
"X Only" = 3,
"C Only" = 3,
"Both" = 3))
setNames(tbl2, sub(".+_", "", names(tbl2))) %>%
kable(digits = 1) %>%
kable_styling("striped") %>%
add_header_above(c(" " = 3,
#"Neither" = 3,
#"X Only" = 3,
"C Only" = 3,
"Both" = 3))
make.est.plot(param. = 1)
make.est.plot(param. = 2)
make.est.plot(param. = 3)
make.est.plot(param. = 4)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true (beta0, beta2)
B13 <- c(1, 10, 2, log(4))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim2_data/v6/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- gsub(".B", "", colnames(sim.out))
colnames(sim.out) <- gsub("B2", "trueB2", colnames(sim.out))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("B"),
names_to = "method.param",
values_to = "estimate") %>%
mutate(method = factor(substr(method.param, 2, 3),
levels = c("or", "cc", "ml", "sp")),
x.correct = factor(x.correct,
levels = c(1, 0)),
c.correct = factor(c.correct,
levels = c(1, 0)),
param = factor(substr(method.param, 4, 4)),
B.true = ifelse(param == 2, trueB2,
ifelse(param == 4, log(s2),
B13[param])))
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, x.correct, c.correct, method, trueB2, s2) %>%
summarize(prop.error = mean(is.na(estimate))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
# extract simulation parameters
q <- unique(sim.out$q)
n <- unique(sim.out$n)
s2 <- unique(sim.out$s2)
trueB2 <- unique(sim.out$trueB2)
x.correct <- unique(sim.out$x.correct)
c.correct <- unique(sim.out$c.correct)
mx <- unique(sim.out$mx)
mc <- unique(sim.out$mc)
my <- unique(sim.out$my)
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, q, n, x.correct, c.correct,
mx, mc, my, s2, trueB2))
# make labels for plots
method.labs <- c("Oracle",
"Complete Case",
"Parametric MLE",
"Semiparametric")
names(method.labs) <- c("or", "cc", "ml", "sp")
q.labs <- paste0("q = ", q)
names(q.labs) <- q
n.labs <- paste0("n = ", n)
names(n.labs) <- n
s2.labs <- paste0("s2 = ", s2)
names(s2.labs) <- s2
trueB2.labs <- paste0("B2 = ", trueB2)
names(trueB2.labs) <- trueB2
specx.labs <- c("X Correct", "X Incorrect")
names(specx.labs) <- x.correct
specc.labs <- c("C Correct", "C Incorrect")
names(specc.labs) <- c.correct
mx.labs <- paste0("mx = ", mx)
names(mx.labs) <- mx
mc.labs <- paste0("mc = ", mc)
names(mc.labs) <- mc
my.labs <- paste0("my = ", my)
names(my.labs) <- my
param.labs <- c("\u03B20", "\u03B21", "\u03B22", "log\u03C3\u00B2")
# colorblind friendly pallette
#pal_light <- cbbPalette <- c('#BBBBBB', '#228833', '#4477AA', '#AA3377')
#pal_dark <- cbbPalette <- c('#5d5d5d', '#114419', '#223b55', '#55193b')
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# boxplot of simulated estimates
make.est.plot <- function(param., est_cutoff = Inf,
q. = q, trueB2. = trueB2, s2. = s2) {
sim.out.long %>%
filter(param == param.,
trueB2 %in% trueB2.,
s2 %in% s2.,
q %in% q.,
abs(estimate - B.true) < est_cutoff) %>%
ggplot(aes(y = estimate,
color = method,
fill = method)) +
geom_boxplot() +
geom_hline(aes(yintercept = B.true),
linetype = "dashed",
linewidth = 0.6,
color = pal_light[4]) +
facet_nested(q + s2 ~ x.correct + c.correct,
scales = "free",
labeller = labeller(n = n.labs,
q = q.labs,
trueB2 = trueB2.labs,
s2 = s2.labs,
x.correct = specx.labs,
c.correct = specc.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates for ",
param.labs[param.]),
subtitle = paste0(#"true B2 = ", trueB2., "; ",
#"s2 = ", s2., "; ",
#"censoring proportion q = ", q., "; ",
n.rep, " replicates per setting")) +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_manual(values = pal_light[c(1, 2, 3, 5, 6)],
labels = method.labs) +
scale_color_manual(values = pal_dark[c(1, 2, 3, 5, 6)],
labels = method.labs)
}
make.est.plot(param. = 1, q = 0.8)
make.est.plot(param. = 2, q = 0.8)
make.est.plot(param. = 3, q = 0.8)
make.est.plot(param. = 4, q = 0.8)
# table summarizing for only beta2, and for q = 0.8
tbl2 <- sim.out.long %>%
filter(param == 2,
q == 0.8) %>%
group_by(n, q, x.correct, c.correct, method) %>%
summarise(Bias = 100*mean(estimate - B.true, na.rm = T),
Variance = 100*sd(estimate, na.rm = T),
MSE = 100*mean((estimate - B.true) ^ 2, na.rm = T)) %>%
gather(key, value, Bias:MSE) %>%
unite(Group, c(x.correct, c.correct), key) %>%
spread(Group, value)
setNames(tbl2, sub(".+_", "", names(tbl2))) %>%
kable(digits = 1) %>%
kable_styling("striped") %>%
add_header_above(c(" " = 3,
#"Neither" = 3,
#"X Only" = 3,
"C Only" = 3,
"Both" = 3))
