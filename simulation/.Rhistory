getwd()
rm(list = ls())
library(devtools)
library(statmod)
#install_github("brian-d-richardson/sparcc"); library(sparcc)
#setwd(dirname(getwd()))
load_all()
# simulation parameters ---------------------------------------------------
# baseline seed (specific to cluster)
args <- 1#commandArgs(TRUE)
base.seed <- 10^6 * as.integer(args)
# number of sims per cluster
n.sim <- 1
# output size
len.out <- 20
# varied parameters
n <- 10000
q <- c(0.4, 0.8)
x.shape <- c(1, 4)
c.shape <- c(1, 4)
# run simulations ---------------------------------------------------------
# create simulation input
sim.in <- expand.grid(n = n,
q = q,
x.shape = x.shape,
c.shape = c.shape,
sim.id = 1:n.sim + base.seed)
# run simulations
sim.out <- pbapply::pbvapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
sim1(n = sim.in$n[ii],
q = sim.in$q[ii],
x.shape = sim.in$x.shape[ii],
c.shape = sim.in$c.shape[ii],
mx = 100,
mc = 15,
my = 3,
seed = sim.in$sim.id[ii])
},
FUN.VALUE = numeric(len.out)) |>
t()
View(sim.out)
rm(list = ls())
library(devtools)
library(statmod)
#install_github("brian-d-richardson/sparcc"); library(sparcc)
#setwd(dirname(getwd()))
load_all()
# simulation parameters ---------------------------------------------------
# baseline seed (specific to cluster)
args <- 1#commandArgs(TRUE)
base.seed <- 10^6 * as.integer(args)
# number of sims per cluster
n.sim <- 1
# output size
len.out <- 20
# varied parameters
n <- 10000
q <- c(0.4, 0.8)
x.shape <- c(1, 4)
c.shape <- c(1, 4)
# run simulations ---------------------------------------------------------
# create simulation input
sim.in <- expand.grid(n = n,
q = q,
x.shape = x.shape,
c.shape = c.shape,
sim.id = 1:n.sim + base.seed)
ii = 1
n = sim.in$n[ii]
q = sim.in$q[ii]
x.shape = sim.in$x.shape[ii]
c.shape = sim.in$c.shape[ii]
mx = 100
mc = 15
my = 3
seed = sim.in$sim.id[ii]
set.seed(seed)
## define parameters
B <- c(1, 2)               # outcome model parameters
s2 <- 1.1                  # Var(Y|X,Z)
x.mean <- 1
x.rate <- x.shape / x.mean # rate parameter for gamma distribution of X
c.rate <- get.c.rate(      # rate parameter for gamma distribution of C
q = q,
x.rate = x.rate,
x.shape = x.shape,
c.shape = c.shape)
## generate data
dat.list <- gen.data(n = n, q = q, B = B, s2 = s2,
x.rate = x.rate, x.shape = x.shape,
c.rate = c.rate, c.shape = c.shape)
datf <- dat.list$datf          # full data
dat0 <- dat.list$dat0          # oracle data
dat <- dat.list$dat            # observed data
datcc <- dat.list$datcc        # complete case data
x.rate.hat <- mean(dat$Delta) / mean(dat$W)      # mle for exponential X rate
c.rate.hat <- mean(1 - dat$Delta) / mean(dat$W)  # mle for exponential C rate
# X density
eta1 <- function(x) dexp(x, rate = x.rate.hat)
# C density
eta2 <- function(c) dexp(c, rate = c.rate.hat)
# X quadrature
x.nds <- seq(10^-6, max(datf$X), length = mx)
x.wts <- eta1(x.nds) / sum(eta1(x.nds))
# C quadrature
c.nds <- seq(10^-6, max(datf$C), length = mc)
c.wts <- eta2(c.nds) / sum(eta2(c.nds))
# Y quadrature
gq <- statmod::gauss.quad(n = my, kind = "hermite")
y.nds <- gq$nodes
y.wts <- gq$weights
# oracle
B0 <- get.root(dat = dat0, score = get.Scc, start = c(0, 0, 0))
B0
args = list()
start = c(0, 0, 0)
score = get.Scc
dat = dat0
rootSolve::multiroot(
f = function(theta) score(dat = dat, args = args,
B = head(theta, -1), s2 = exp(tail(theta, 1))),
start = start)$root
# complete case
Bcc <- get.root(dat = dat, score = get.Scc, start = c(0, 0, 0))
Bcc
mean(dat$Y)
mean(dat$Y) / mean(dat$W)
# naive starting value
naive.lm <- lm(y ~ x, data = dat)
dat
lm(Y ~ W, data = dat)
# complete case lm to get starting value
naive.lm <- lm(Y ~ W, data = dat)
# complete case lm to get starting value
naive.lm <- lm(Y ~ W, data = datcc)
naive.lm
naive.lm$coef
naive.lm$resid
var(naive.lm$resid)
log(var(naive.lm$resid))
# oracle
B0 <- get.root(dat = dat0, score = get.Scc,
start = c(naive.lm$coef, log(var(naive.lm$resid))))
B0
# oracle
B0 <- get.root(dat = dat0, score = get.Scc,
start = c(naive.lm$coef, log(var(naive.lm$resid))))
# complete case
Bcc <- get.root(dat = dat, score = get.Scc,
start = c(naive.lm$coef, log(var(naive.lm$resid))))
# MLE
Bmle <- get.root(dat = dat, score = get.Sml, start = Bcc,
args = list(mu = mu, d.mu = d.mu, SF = SF, fy = fy,
x.nds = x.nds, x.wts = x.wts))
Bmle
# semiparametric efficient score
Beff <- get.root(dat = dat, score = get.Seff, start = Bcc,
args = list(mu = mu, d.mu = d.mu, SF = SF, fy = fy,
eta1 = eta1,
x.nds = x.nds, x.wts = x.wts,
c.nds = c.nds, c.wts = c.wts,
y.nds = y.nds, y.wts = y.wts))
Beff
