kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
add_header_above(c(" " = 2,
"q = 0.4" = 4,
"q = 0.8" = 4))
return(kbl1)
}
make.table(1)
make.table(2)
make.table(3)
make.table(4)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true beta
B <- c(1, 10, 2, log(1))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = c(1:9),
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim3_data/v5/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- gsub(".B", "", colnames(sim.out))
colnames(sim.out) <- gsub("B2", "trueB2", colnames(sim.out))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("B"),
names_to = "method.param",
values_to = "estimate") %>%
mutate(method = factor(substr(method.param, 2, 3),
levels = c("or", "cc", "ml", "sp"),
labels = c("Oracle",
"Complete Case",
"Parametric MLE",
"Semiparametric")),
param = factor(substr(method.param, 4, 4)),
B.true = B[param])
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, method) %>%
summarize(prop.error = mean(is.na(estimate))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
# extract simulation parameters
q <- unique(sim.out$q)
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, q))
# make labels for plots
param.labs <- c("\u03B20", "\u03B21", "\u03B22", "log\u03C3\u00B2")
names(param.labs) <- 1:4
# colorblind friendly pallette
#pal_light <- cbbPalette <- c('#BBBBBB', '#228833', '#4477AA', '#AA3377')
#pal_dark <- cbbPalette <- c('#5d5d5d', '#114419', '#223b55', '#55193b')
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# obtain empirical variances by method, parameter, and q
sim.out.sum <- sim.out.long %>%
group_by(q, method, param) %>%
filter(!is.na(estimate)) %>%
summarise(var = var(estimate),
Var = mean((estimate - B.true) ^ 2),
se.Var = sd((estimate - B.true) ^ 2) / sqrt(n.rep),
Var.lower = Var - qnorm(0.975) * se.Var ,
Var.upper = Var + qnorm(0.975) * se.Var)
# plot variance over q
ggplot(sim.out.sum,
aes(x = q,
y = Var,
ymin = Var.lower,
ymax = Var.upper,
fill = method,
color = method,
shape = method)) +
geom_point() +
#geom_errorbar() +
geom_ribbon(alpha = 0.3) +
geom_line() +
facet_wrap(~ param,
scales = "free",
labeller = labeller(param = param.labs)) +
theme_bw() +
theme(legend.position = "bottom") +
scale_color_manual(values = pal_light[c(1, 2, 3, 5)]) +
labs(x = "Censoring Proportion (q)",
y = "Empircal Variance of Parameter Estimates",
color = "Method",
shape = "Method",
fill = "Method") +
ggtitle("Variance of Parameter Estimators by Censoring Proportion",
subtitle = paste0(n.rep, " Simulations per Setting"))
# plot variance over q for beta_1 only
ggplot(filter(sim.out.sum, param == 2, q <= 0.85),
aes(x = q,
y = var,
ymin = Var.lower,
ymax = Var.upper,
fill = method,
color = method,
shape = method)) +
geom_point() +
geom_line() +
geom_ribbon(alpha = 0.3) +
labs(x = "Censoring Proportion (q)",
y = "Variance",
color = "Method",
shape = "Method",
fill = "Method") +
theme_bw() +
theme(legend.position = "bottom") +
scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1)) +
scale_color_manual(values = pal_light[c(1, 2, 3, 5)]) #+
#ggtitle("Variance of \u03B21 Estimator by Censoring Proportion",
#subtitle = paste0(n.rep, " Simulations per Setting"))
ggsave("sim_plots/sim1_2_variances.png",
dpi = 300,
width = 6,
height = 4)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(stringr)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true beta
B.true <- c(1, 10, 2, log(1))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim5_data/v8/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- gsub(".B", ".", colnames(sim.out))
colnames(sim.out) <- gsub("B2", "trueB2", colnames(sim.out))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with(c("B", "V", "S.")),
names_to = "method.param",
values_to = "estimate") %>%
mutate(estimate = ifelse(abs(estimate) > 100, NA, estimate),
name = factor(str_sub(method.param, 1, 1)),
method = factor(str_sub(method.param, 3, 4),
levels = c("sp", "ml", "cc", "or"),
labels = c("Semipar", "MLE", "CC", "Oracle")),
nuis.x = factor(str_sub(str_sub(
gsub("[.]", "", method.param), 4, -2), 1, 1),
levels = c("", "1", "0",  "2"),
labels = c("-", "T", "F", "Nonpar")),
nuis.c = factor(str_sub(str_sub(
gsub("[.]", "", method.param), 4, -2), 2, 2),
levels = c("", "1", "0",  "2"),
labels = c("-", "T", "F", "Nonpar")),
param = factor(str_sub(method.param, -1, -1)),
B.true = B.true[param]) %>%
dplyr::select(-c(method.param)) %>%
group_by(clust, n, q, name, method, nuis.x, nuis.c, param) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = estimate,
id_cols = c(clust, n, q, method, nuis.x, nuis.c,
param, B.true, id)) %>%
mutate(ci.if.lower = B - qnorm(0.975) * V,
ci.if.upper = B + qnorm(0.975) * V,
ci.if.cov = B.true >= ci.if.lower & B.true <= ci.if.upper,
ci.sand.lower = B - qnorm(0.975) * S,
ci.sand.upper = B + qnorm(0.975) * S,
ci.sand.cov = B.true >= ci.sand.lower & B.true <= ci.sand.upper)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(stringr)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true beta
B.true <- c(1, 10, 2, log(1))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim5_data/v8/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- gsub(".B", ".", colnames(sim.out))
colnames(sim.out) <- gsub("B2", "trueB2", colnames(sim.out))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with(c("B", "V", "S.")),
names_to = "method.param",
values_to = "estimate") %>%
mutate(estimate = ifelse(abs(estimate) > 100, NA, estimate),
name = factor(str_sub(method.param, 1, 1)),
method = factor(str_sub(method.param, 3, 4),
levels = c("sp", "ml", "cc", "or"),
labels = c("Semipar", "MLE", "CC", "Oracle")),
nuis.x = factor(str_sub(str_sub(
gsub("[.]", "", method.param), 4, -2), 1, 1),
levels = c("", "1", "0",  "2"),
labels = c("-", "T", "F", "Nonpar")),
nuis.c = factor(str_sub(str_sub(
gsub("[.]", "", method.param), 4, -2), 2, 2),
levels = c("", "1", "0",  "2"),
labels = c("-", "T", "F", "Nonpar")),
param = factor(str_sub(method.param, -1, -1)),
B.true = B.true[param]) %>%
dplyr::select(-c(method.param)) %>%
group_by(clust, n, q, name, method, nuis.x, nuis.c, param) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = estimate,
id_cols = c(clust, n, q, method, nuis.x, nuis.c,
param, B.true, id)) %>%
mutate(ci.if.lower = B - qnorm(0.975) * V,
ci.if.upper = B + qnorm(0.975) * V,
ci.if.cov = B.true >= ci.if.lower & B.true <= ci.if.upper,
ci.sand.lower = B - qnorm(0.975) * S,
ci.sand.upper = B + qnorm(0.975) * S,
ci.sand.cov = B.true >= ci.sand.lower & B.true <= ci.sand.upper)
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, method, nuis.x, nuis.c) %>%
summarize(n.error = sum(is.na(B)),
prop.error = mean(is.na(B))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
# table with both types of variance estimators
make.table.bothvar <- function(param., format = "html") {
tbl1 <- sim.out.long %>%
filter(param == param.) %>%
group_by(q, method, nuis.x, nuis.c) %>%
summarise(v1_Bias = 10*mean(B - B.true, na.rm = T),
v2_ESE = 10*sd(B, na.rm = T),
v3_ASEIF = 10*mean(V, na.rm = T),
v4_ASESand = 10*mean(S, na.rm = T),
v5_CovIF = 100*mean(ci.if.cov, na.rm = T),
v6_CovSand = 100*mean(ci.sand.cov, na.rm = T)) %>%
gather(key, value, v1_Bias:v6_CovSand) %>%
unite(Group, q, key) %>%
spread(Group, value)
kbl1 <- setNames(tbl1, c("Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0,
2, 2, 2, 2, 1, 1,
2, 2, 2, 2, 1, 1),
format = format,
align = "lccrrrrrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
add_header_above(c(" " = 3,
"q = 0.4" = 6,
"q = 0.8" = 6))
return(kbl1)
}
make.table.bothvar(1)
make.table.bothvar(2)
make.table.bothvar(3)
make.table.bothvar(4)
# table with both types of variance estimators
make.table <- function(param., format = "html") {
tbl1 <- sim.out.long %>%
filter(param == param.) %>%
group_by(q, method, nuis.x, nuis.c) %>%
summarise(v1_Bias = 10*mean(B - B.true, na.rm = T),
v2_ESE = 10*sd(B, na.rm = T),
v3_ASE = 10*mean(V, na.rm = T),
v4_Cov = 100*mean(ci.if.cov, na.rm = T)) %>%
gather(key, value, v1_Bias:v4_Cov) %>%
unite(Group, q, key) %>%
spread(Group, value)
kbl1 <- setNames(tbl1, c("Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "lccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
add_header_above(c(" " = 3,
"q = 0.4" = 4,
"q = 0.8" = 4))
return(kbl1)
}
make.table(1)
make.table(2)
make.table(3)
make.table(4)
t2 <- make.table(2, format = "latex")
View(sim.out.long)
format = "html"
tbl1 <- sim.out.long %>%
mutate(Param = ifelse(param == 1, "$\beta_1$",
ifelse(param == 2, "$\beta_2$",
ifelse(param == 3, "$\beta_3$",
ifelse(param == 4, "$\log\sigma^2$"))))) %>%
tbl1 <- sim.out.long %>%
mutate(Param = ifelse(param == 1, "$\\beta_1$",
ifelse(param == 2, "$\\beta_2$",
ifelse(param == 3, "$\\beta_3$",
ifelse(param == 4, "$\\log\\sigma^2$"))))) %>%
group_by(q, param, method, nuis.x, nuis.c) %>%
summarise(v1_Bias = 10*mean(B - B.true, na.rm = T),
v2_ESE = 10*sd(B, na.rm = T),
v3_ASE = 10*mean(V, na.rm = T),
v4_Cov = 100*mean(ci.if.cov, na.rm = T)) %>%
gather(key, value, v1_Bias:v4_Cov) %>%
unite(Group, q, key) %>%
spread(Group, value)
tbl1 <- sim.out.long %>%
mutate(Param = ifelse(param == 1, "$\\beta_1$",
ifelse(param == 2, "$\\beta_2$",
ifelse(param == 3, "$\\beta_3$",
ifelse(param == 4, "$\\log\\sigma^2$"))))) %>%
group_by(q, Param, method, nuis.x, nuis.c) %>%
summarise(v1_Bias = 10*mean(B - B.true, na.rm = T),
v2_ESE = 10*sd(B, na.rm = T),
v3_ASE = 10*mean(V, na.rm = T),
v4_Cov = 100*mean(ci.if.cov, na.rm = T)) %>%
gather(key, value, v1_Bias:v4_Cov) %>%
unite(Group, q, key) %>%
spread(Group, value)
View(tbl1)
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "lccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "ccccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0, 0m
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "ccccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
add_header_above(c(" " = 4,
"q = 0.4" = 4,
"q = 0.8" = 4))
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "ccccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE) %>%
add_header_above(c(" " = 4,
"q = 0.4" = 4,
"q = 0.8" = 4))
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -4)))) %>%
kable(digits = c(0, 0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "ccccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE) %>%
add_header_above(c(" " = 4,
"q = 0.4" = 4,
"q = 0.8" = 4))
kbl1
make.table.allparam(format = "latex")
# table with all parameters
make.table.allparam <- function(format = "html") {
tbl1 <- sim.out.long %>%
mutate(Param = ifelse(param == 1, "$\\beta_1$",
ifelse(param == 2, "$\\beta_2$",
ifelse(param == 3, "$\\beta_3$",
ifelse(param == 4, "$\\log\\sigma^2$"))))) %>%
group_by(q, Param, method, nuis.x, nuis.c) %>%
summarise(v1_Bias = 10*mean(B - B.true, na.rm = T),
v2_ESE = 10*sd(B, na.rm = T),
v3_ASE = 10*mean(V, na.rm = T),
v4_Cov = 100*mean(ci.if.cov, na.rm = T)) %>%
gather(key, value, v1_Bias:v4_Cov) %>%
unite(Group, q, key) %>%
spread(Group, value)
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -4)))) %>%
kable(digits = c(0, 0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "ccccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE) %>%
add_header_above(c(" " = 4,
"q = 0.4" = 4,
"q = 0.8" = 4))
return(kbl1)
}
make.table.allparam()
make.table.allparam(format = "latex")
t3 <- make.table.allparam(format = "latex")
t3
rm(list = ls())
# indicator for running on cluster
on.cluster <- F
if (on.cluster) {
setwd(dirname(getwd()))
args <- commandArgs(TRUE)          # cluster id
} else {
args <- 1
}
library(devtools)
library(statmod)
library(fitdistrplus)
library(DALSM)
library(dplyr)
library(numDeriv)
load_all()
base.seed <- 10^6 * as.integer(args) # baseline seed (specific to cluster)
len.out <- 123                       # output size
n.sim <- 1                           # number of sims per cluster
n <- 8000                            # sample size
q <- 0.8                             # censoring proportion
rm(list = ls())
# indicator for running on cluster
on.cluster <- F
if (on.cluster) {
setwd(dirname(getwd()))
args <- commandArgs(TRUE)          # cluster id
} else {
args <- 1
}
library(devtools)
library(statmod)
library(fitdistrplus)
library(DALSM)
library(dplyr)
library(numDeriv)
load_all()
base.seed <- 10^6 * as.integer(args) # baseline seed (specific to cluster)
len.out <- 123                       # output size
n.sim <- 1                           # number of sims per cluster
n <- 8000                            # sample size
q <- 0.8                             # censoring proportion
## create simulation input
sim.in <- expand.grid(n = n,
q = q,
sim.id = 1:n.sim + base.seed)
## run simulations (roughly 6 minutes per replicate)
sim.out <- pbapply::pbvapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
tryCatch(
expr = sim1(
n = sim.in$n[ii],
q = sim.in$q[ii],
seed = sim.in$sim.id[ii]),
error = function(e) c(
n = sim.in$n[ii],
q = sim.in$q[ii],
seed = sim.in$sim.id[ii],
rep(NA, len.out - 3)))
},
FUN.VALUE = numeric(len.out)) |>
t()
