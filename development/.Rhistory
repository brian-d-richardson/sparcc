V.ml.1.2 <- tryCatch(
expr =
var.est.mle(
dat = dat,
get.S = function(dat, theta, args, return.sums = F) {
alpha <- tail(theta, -4)
# define estimated X|Z density
eta1 <- function(x, z) {
dbeta(x = x,
shape1 = alpha[z + 1],
shape2 = alpha[z + 3])
}
# create quadrature nodes
x.wts <- vapply(
X = 1:length(zs),
FUN.VALUE = numeric(mx),
FUN = function(i) eta1(x.nds[,i], zs[i]) / sum(eta1(x.nds[,i], zs[i])))
args <- list(x.nds = x.nds, x.wts = x.wts)
# stack estimating equations
cbind(get.Sml(dat = dat, theta = head(theta, 4),
args = args, return.sums = return.sums),
d.log.fxz(dat = dat, theta = alpha,
args = args, return.sums = return.sums))
},
theta = c(B.ml.1, x.params.hat.correct),
args = list(x.nds = x.nds, x.wts = x.wts),
return.se = T),
error = rep(NA, length(V.cc)))
V.ml.1.2 <- tryCatch(
expr =
var.est.mle(
dat = dat,
get.S = function(dat, theta, args) {
alpha <- tail(theta, -4)
# define estimated X|Z density
eta1 <- function(x, z) {
dbeta(x = x,
shape1 = alpha[z + 1],
shape2 = alpha[z + 3])
}
# create quadrature nodes
x.wts <- vapply(
X = 1:length(zs),
FUN.VALUE = numeric(mx),
FUN = function(i) eta1(x.nds[,i], zs[i]) / sum(eta1(x.nds[,i], zs[i])))
args <- list(x.nds = x.nds, x.wts = x.wts)
# stack estimating equations
cbind(get.Sml(dat = dat, theta = head(theta, 4),
args = args, return.sums = F),
d.log.fxz(dat = dat, theta = alpha,
args = args, return.sums = F))
},
theta = c(B.ml.1, x.params.hat.correct),
args = list(x.nds = x.nds, x.wts = x.wts),
return.se = T),
error = rep(NA, length(V.cc)))
V.ml.1 <- tryCatch(
expr =
var.est.mle(
dat = dat,
get.S = function(dat, theta, args) {
alpha <- tail(theta, -4)
# define estimated X|Z density
eta1 <- function(x, z) {
dbeta(x = x,
shape1 = alpha[z + 1],
shape2 = alpha[z + 3])
}
# create quadrature nodes
x.wts <- vapply(
X = 1:length(zs),
FUN.VALUE = numeric(mx),
FUN = function(i) eta1(x.nds[,i], zs[i]) / sum(eta1(x.nds[,i], zs[i])))
args <- list(x.nds = x.nds, x.wts = x.wts)
# stack estimating equations
cbind(get.Sml(dat = dat, theta = head(theta, 4),
args = args, return.sums = F),
d.log.fxz(dat = dat, theta = alpha,
args = args, return.sums = F))
},
theta = c(B.ml.1, x.params.hat.correct),
args = list(x.nds = x.nds, x.wts = x.wts),
return.se = T),
error = rep(NA, length(V.cc)))
## MLE (X|Z incorrect)
B.ml.0 <- get.root(dat = dat, score = get.Sml, start = B.cc,
args = append(mle.args, list("x.wts" = x.wts.wrong)))
V.ml.0 <- tryCatch(
expr =
var.est.sand(
dat = dat,
get.S = function(dat, theta, args, return.sums = F) {
alpha <- tail(theta, -4)
# define estimated X|Z density
eta1 <- function(x, z) {
dbeta(x = x,
shape1 = alpha[1],
shape2 = alpha[2])
}
# create quadrature nodes
x.wts <- vapply(
X = 1:length(zs),
FUN.VALUE = numeric(mx),
FUN = function(i) eta1(x.nds[,i], zs[i]) / sum(eta1(x.nds[,i], zs[i])))
args <- list(x.nds = x.nds, x.wts = x.wts)
# stack estimating equations
ret <- cbind(get.Sml(dat = dat, theta = head(theta, 4),
args = args, return.sums = F),
d.log.fx(dat = dat, theta = alpha,
args = args, return.sums = F))
if (return.sums) {
return(colSums(ret))
} else {
return(ret)
}
},
theta = c(B.ml.0, x.params.hat.wrong),
args = list(x.nds = x.nds, x.wts = x.wts),
return.se = T),
error = rep(NA, length(V.cc)))
V.ml.0 <- tryCatch(
expr =
var.est.mle(
dat = dat,
get.S = function(dat, theta, args, return.sums = F) {
alpha <- tail(theta, -4)
# define estimated X|Z density
eta1 <- function(x, z) {
dbeta(x = x,
shape1 = alpha[1],
shape2 = alpha[2])
}
# create quadrature nodes
x.wts <- vapply(
X = 1:length(zs),
FUN.VALUE = numeric(mx),
FUN = function(i) eta1(x.nds[,i], zs[i]) / sum(eta1(x.nds[,i], zs[i])))
args <- list(x.nds = x.nds, x.wts = x.wts)
# stack estimating equations
ret <- cbind(get.Sml(dat = dat, theta = head(theta, 4),
args = args, return.sums = F),
d.log.fx(dat = dat, theta = alpha,
args = args, return.sums = F))
if (return.sums) {
return(colSums(ret))
} else {
return(ret)
}
},
theta = c(B.ml.0, x.params.hat.wrong),
args = list(x.nds = x.nds, x.wts = x.wts),
return.se = T),
error = rep(NA, length(V.cc)))
## MLE (X|Z nonparametric)
B.ml.2 <- get.root(dat = dat, score = get.Sml, start = B.cc,
args = append(mle.args, list("x.wts" = x.wts.nonpar)))
B.ml.2
B.ml.1
theta.hat.x
theta.hat.x <- spline.res.x$theta
theta.hat.x
V.ml.2 <- var.est.mle(
dat = dat,
get.S = function(dat, theta, args) {
# split parameter into outcome and nuisance params
theta.out <- head(theta, 4)
theta.nuis <- matrix(tail(theta, -4), ncol = length(zs))
# define estimated X|Z density
eta1 <- function(x, z) {
# spline basis for supplied x values
bs.x <- splines::bs(
x = x,
knots = knots,
Boundary.knots = c(0, 1),
degree = deg,
intercept = F)
# transform theta parameter to alpha
alpha.hat <- apply(theta.nuis, 2, function(x) softmax(x, wts = wts))
# estimated density
fxz <- numeric(length(x))
for (zi in 1:length(zs)) {
z.ind <- z == zs[zi]
fxz[z.ind] <- bs.x[z.ind,] %*% alpha.hat[,zi]
}
return(fxz)
}
# create quadrature nodes
x.wts <- vapply(
X = 1:length(zs),
FUN.VALUE = numeric(mx),
FUN = function(i) eta1(x.nds[,i], zs[i]) / sum(eta1(x.nds[,i], zs[i])))
args <- list(x.nds = x.nds, x.wts = x.wts)
# stack estimating equations
cbind(get.Sml(dat = dat, theta = head(theta, 4),
args = args, return.sums = F),
glogf(dat = dat, theta = matrix(theta.nuis, ncol = length(zs))))
},
theta = c(B.ml.2, theta.hat.x),
args = list(),
ridge.size = 1E-6,
return.se = F
)
knots.x <- spline.res.x$knots
V.ml.2 <- var.est.mle(
dat = dat,
get.S = function(dat, theta, args) {
# split parameter into outcome and nuisance params
theta.out <- head(theta, 4)
theta.nuis <- matrix(tail(theta, -4), ncol = length(zs))
# define estimated X|Z density
eta1 <- function(x, z) {
# spline basis for supplied x values
bs.x <- splines::bs(
x = x,
knots = knots.x,
Boundary.knots = c(0, 1),
degree = deg,
intercept = F)
# transform theta parameter to alpha
alpha.hat <- apply(theta.nuis, 2, function(x) softmax(x, wts = wts))
# estimated density
fxz <- numeric(length(x))
for (zi in 1:length(zs)) {
z.ind <- z == zs[zi]
fxz[z.ind] <- bs.x[z.ind,] %*% alpha.hat[,zi]
}
return(fxz)
}
# create quadrature nodes
x.wts <- vapply(
X = 1:length(zs),
FUN.VALUE = numeric(mx),
FUN = function(i) eta1(x.nds[,i], zs[i]) / sum(eta1(x.nds[,i], zs[i])))
args <- list(x.nds = x.nds, x.wts = x.wts)
# stack estimating equations
cbind(get.Sml(dat = dat, theta = head(theta, 4),
args = args, return.sums = F),
glogf(dat = dat, theta = matrix(theta.nuis, ncol = length(zs))))
},
theta = c(B.ml.2, theta.hat.x),
args = list(),
ridge.size = 1E-6,
return.se = F
)
wts.x <- spline.res.x$wts
V.ml.2 <- var.est.mle(
dat = dat,
get.S = function(dat, theta, args) {
# split parameter into outcome and nuisance params
theta.out <- head(theta, 4)
theta.nuis <- matrix(tail(theta, -4), ncol = length(zs))
# define estimated X|Z density
eta1 <- function(x, z) {
# spline basis for supplied x values
bs.x <- splines::bs(
x = x,
knots = knots.x,
Boundary.knots = c(0, 1),
degree = deg,
intercept = F)
# transform theta parameter to alpha
alpha.hat <- apply(theta.nuis, 2, function(x) softmax(x, wts = wts.x))
# estimated density
fxz <- numeric(length(x))
for (zi in 1:length(zs)) {
z.ind <- z == zs[zi]
fxz[z.ind] <- bs.x[z.ind,] %*% alpha.hat[,zi]
}
return(fxz)
}
# create quadrature nodes
x.wts <- vapply(
X = 1:length(zs),
FUN.VALUE = numeric(mx),
FUN = function(i) eta1(x.nds[,i], zs[i]) / sum(eta1(x.nds[,i], zs[i])))
args <- list(x.nds = x.nds, x.wts = x.wts)
# stack estimating equations
cbind(get.Sml(dat = dat, theta = head(theta, 4),
args = args, return.sums = F),
glogf(dat = dat, theta = matrix(theta.nuis, ncol = length(zs))))
},
theta = c(B.ml.2, theta.hat.x),
args = list(),
ridge.size = 1E-6,
return.se = F
)
glogf <- spline.res.x$glogf
V.ml.2 <- var.est.mle(
dat = dat,
get.S = function(dat, theta, args) {
# split parameter into outcome and nuisance params
theta.out <- head(theta, 4)
theta.nuis <- matrix(tail(theta, -4), ncol = length(zs))
# define estimated X|Z density
eta1 <- function(x, z) {
# spline basis for supplied x values
bs.x <- splines::bs(
x = x,
knots = knots.x,
Boundary.knots = c(0, 1),
degree = deg,
intercept = F)
# transform theta parameter to alpha
alpha.hat <- apply(theta.nuis, 2, function(x) softmax(x, wts = wts.x))
# estimated density
fxz <- numeric(length(x))
for (zi in 1:length(zs)) {
z.ind <- z == zs[zi]
fxz[z.ind] <- bs.x[z.ind,] %*% alpha.hat[,zi]
}
return(fxz)
}
# create quadrature nodes
x.wts <- vapply(
X = 1:length(zs),
FUN.VALUE = numeric(mx),
FUN = function(i) eta1(x.nds[,i], zs[i]) / sum(eta1(x.nds[,i], zs[i])))
args <- list(x.nds = x.nds, x.wts = x.wts)
# stack estimating equations
cbind(get.Sml(dat = dat, theta = head(theta, 4),
args = args, return.sums = F),
glogf(dat = dat, theta = matrix(theta.nuis, ncol = length(zs))))
},
theta = c(B.ml.2, theta.hat.x),
args = list(),
ridge.size = 1E-6,
return.se = F
)
V.ml.2 <- var.est.mle(
dat = dat,
get.S = function(dat, theta, args) {
# split parameter into outcome and nuisance params
theta.out <- head(theta, 4)
theta.nuis <- matrix(tail(theta, -4), ncol = length(zs))
# define estimated X|Z density
eta1 <- function(x, z) {
# spline basis for supplied x values
bs.x <- splines::bs(
x = x,
knots = knots.x,
Boundary.knots = c(0, 1),
degree = deg,
intercept = F)
# transform theta parameter to alpha
alpha.hat <- apply(theta.nuis, 2, function(x) softmax(x, wts = wts.x))
# estimated density
fxz <- numeric(length(x))
for (zi in 1:length(zs)) {
z.ind <- z == zs[zi]
fxz[z.ind] <- bs.x[z.ind,] %*% alpha.hat[,zi]
}
return(fxz)
}
# create quadrature nodes
x.wts <- vapply(
X = 1:length(zs),
FUN.VALUE = numeric(mx),
FUN = function(i) eta1(x.nds[,i], zs[i]) / sum(eta1(x.nds[,i], zs[i])))
args <- list(x.nds = x.nds, x.wts = x.wts)
# stack estimating equations
cbind(get.Sml(dat = dat, theta = head(theta, 4),
args = args, return.sums = F),
glogf(dat = dat, theta = matrix(theta.nuis, ncol = length(zs))))
},
theta = c(B.ml.2, theta.hat.x),
args = list(),
ridge.size = 1E-6,
return.se = T
)
V.ml.2
round(V.ml.1, 2)
round(V.ml.2, 2)
sp.args <- list(mu = mu, d.mu = d.mu, SF = SF, fy = fy,
x.nds = x.nds, c.nds = c.nds,
y.nds = y.nds, y.wts = y.wts)
B.sp.11 <- get.root(dat = dat, score = get.Seff, start = B.cc,
args = append(sp.args, list("x.wts" = x.wts.correct,
"c.wts" = c.wts.correct,
"eta1" = eta1.correct)))
V.sp.11 <- var.est(dat = dat, theta = B.sp.11,
args = append(sp.args, list("x.wts" = x.wts.correct,
"c.wts" = c.wts.correct,
"eta1" = eta1.correct)),
get.S = get.Seff, return.se = T)
## semiparametric (X|Z correct, C|Z incorrect)
B.sp.10 <- get.root(dat = dat, score = get.Seff, start = B.cc,
args = append(sp.args, list("x.wts" = x.wts.correct,
"c.wts" = c.wts.wrong,
"eta1" = eta1.correct)))
V.sp.10 <- var.est(dat = dat, theta = B.sp.10,
args = append(sp.args, list("x.wts" = x.wts.correct,
"c.wts" = c.wts.wrong,
"eta1" = eta1.correct)),
get.S = get.Seff, return.se = T)
## semiparametric (X|Z incorrect, C|Z correct)
B.sp.01 <- get.root(dat = dat, score = get.Seff, start = B.cc,
args = append(sp.args, list("x.wts" = x.wts.wrong,
"c.wts" = c.wts.correct,
"eta1" = eta1.wrong)))
V.sp.01 <- var.est(dat = dat, theta = B.sp.01,
args = append(sp.args, list("x.wts" = x.wts.wrong,
"c.wts" = c.wts.correct,
"eta1" = eta1.wrong)),
get.S = get.Seff, return.se = T)
## semiparametric (X|Z, C|Z incorrect)
B.sp.00 <- get.root(dat = dat, score = get.Seff, start = B.cc,
args = append(sp.args, list("x.wts" = x.wts.wrong,
"c.wts" = c.wts.wrong,
"eta1" = eta1.wrong)))
V.sp.00 <- var.est(dat = dat, theta = B.sp.00,
args = append(sp.args, list("x.wts" = x.wts.wrong,
"c.wts" = c.wts.wrong,
"eta1" = eta1.wrong)),
get.S = get.Seff, return.se = T)
## semiparametric (X|Z, C|Z nonparametric)
B.sp.22 <- get.root(dat = dat, score = get.Seff, start = B.cc,
args = append(sp.args, list("x.wts" = x.wts.nonpar,
"c.wts" = c.wts.nonpar,
"eta1" = eta1.nonpar)))
V.sp.22 <- var.est(dat = dat, theta = B.sp.22,
args = append(sp.args, list("x.wts" = x.wts.nonpar,
"c.wts" = c.wts.nonpar,
"eta1" = eta1.nonpar)),
get.S = get.Seff, return.se = T)
# return setup parameters, estimates, and standard errors (length 89)
ret <- c(n = n, q = q, seed = seed,
B.or = B.or, B.cc = B.cc,
B.ml.0 = B.ml.0, B.ml.1 = B.ml.1, B.ml.2 = B.ml.2,
B.sp.00 = B.sp.00, B.sp.01 = B.sp.01, B.sp.10 = B.sp.10,
B.sp.11 = B.sp.11, B.sp.22 = B.sp.22,
V.or = V.or, V.cc = V.cc,
V.ml.0 = V.ml.0, V.ml.1 = V.ml.1, V.ml.2 = V.ml.2,
V.sp.00 = V.sp.00, V.sp.01 = V.sp.01, V.sp.10 = V.sp.10,
V.sp.11 = V.sp.11, V.sp.22 = V.sp.22)
round(ret, 2)
V.ml.1
# return setup parameters, estimates, and standard errors (length 89)
ret <- c(n = n, q = q, seed = seed,
B.or = B.or, B.cc = B.cc,
B.ml.0 = B.ml.0, B.ml.1 = B.ml.1, B.ml.2 = B.ml.2,
B.sp.00 = B.sp.00, B.sp.01 = B.sp.01, B.sp.10 = B.sp.10,
B.sp.11 = B.sp.11, B.sp.22 = B.sp.22,
V.or = V.or, V.cc = V.cc,
V.ml.0 = V.ml.0, V.ml.1 = V.ml.1[1:4], V.ml.2 = V.ml.2[1:4],
V.sp.00 = V.sp.00, V.sp.01 = V.sp.01, V.sp.10 = V.sp.10,
V.sp.11 = V.sp.11, V.sp.22 = V.sp.22)
round(ret, 1)
rm(list = ls())
# indicator for running on cluster
on.cluster <- F
if (on.cluster) {
setwd(dirname(getwd()))
args <- commandArgs(TRUE)          # cluster id
} else {
args <- 1
}
library(devtools)
library(statmod)
library(fitdistrplus)
library(dplyr)
library(numDeriv)
library(zipfR)
load_all()
base.seed <- 10^6 * as.integer(args) # baseline seed (specific to cluster)
len.out <- 85                        # output size
n.sim <- 1#100                         # number of sims per cluster
n <- 8000                            # sample size
q <- 0.4#c(0.4, 0.8)                     # censoring proportion
# run simulations ---------------------------------------------------------
## create simulation input
sim.in <- expand.grid(n = n,
q = q,
sim.id = 1:n.sim + base.seed)
base.seed <- 10^6 * as.integer(args) # baseline seed (specific to cluster)
len.out <- 85                        # output size
n.sim <- 1#100                         # number of sims per cluster
n <- 8000                            # sample size
q <- 0.4#c(0.4, 0.8)                     # censoring proportion
# run simulations ---------------------------------------------------------
## create simulation input
sim.in <- expand.grid(n = n,
q = q,
sim.id = 1:n.sim + base.seed)
## run simulations (roughly 6 minutes per replicate)
sim.out <- pbapply::pbvapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
tryCatch(
expr = sim1_v2(
n = sim.in$n[ii],
q = sim.in$q[ii],
seed = sim.in$sim.id[ii]),
error = function(e) c(
n = sim.in$n[ii],
q = sim.in$q[ii],
seed = sim.in$sim.id[ii],
rep(NA, len.out - 3)))
},
FUN.VALUE = numeric(len.out)) |>
t()
sim.out
ii = 1
sim1_v2(
n = sim.in$n[ii],
q = sim.in$q[ii],
seed = sim.in$sim.id[ii])
load_all()
sim1_v2(
n = sim.in$n[ii],
q = sim.in$q[ii],
seed = sim.in$sim.id[ii])
View(sim.out)
