c.param.hat <- gammaMLE(yi = dat$W, si = 1 - dat$Delta, scale = F)$estimate
eta2 <- function(x)
dgamma(x = x, shape = c.param.hat["shape"], rate = c.param.hat["rate"])
} else {
c.rate.hat <- mean(1 - dat$Delta) / mean(dat$W)
eta2 <- function(x) dexp(x, rate = c.rate.hat)
}
# create quadrature rules -------------------------------------------------
x.upper <- max(datf$X)  # oracle max
c.upper <- max(datf$C)
#x.upper <- sum(1/(1:n)) / x.rate.hat # estimated expected max
#c.upper <- sum(1/(1:n)) / c.rate.hat
#x.upper <- qexp((n-1)/n, rate = x.rate.hat)  # estimated (n-1)/n quantile
#c.upper <- qexp((n-1)/n, rate = c.rate.hat)
# X quadrature
x.nds <- seq(10^-5, x.upper, length = mx)
x.wts <- eta1(x.nds) / sum(eta1(x.nds))
# C quadrature
c.nds <- seq(10^-5, c.upper, length = mc)
c.wts <- eta2(c.nds) / sum(eta2(c.nds))
# Y quadrature
gq <- gauss.quad(n = my, kind = "hermite")
y.nds <- gq$nodes
y.wts <- gq$weights
# evaluate estimating functions -------------------------------------------
# oracle
S0 <- get.Scc(dat = dat0, B = B, s2 = s2,
args = list(mu = mu, d.mu = d.mu, SF = SF),
return.sums = F)
assess.ee(S0)
# complete case
Scc <- get.Scc(dat = dat, B = B, s2 = s2,
args = list(mu = mu, d.mu = d.mu, SF = SF),
return.sums = F)
assess.ee(Scc)
# MLE
Sml <- get.Sml(dat = dat, B = B, s2 = s2,
args = list(mu = mu, d.mu = d.mu, SF = SF, fy = fy,
x.nds = x.nds, x.wts = x.wts),
return.sums = F)
assess.ee(Sml)
# semiparametric efficient score
Seff <- get.Seff(dat = dat, B = B, s2 = s2,
args = list(mu = mu, d.mu = d.mu, SF = SF, fy = fy, eta1 = eta1,
x.nds = x.nds, x.wts = x.wts,
c.nds = c.nds, c.wts = c.wts,
y.nds = y.nds, y.wts = y.wts),
return.sums = F)
assess.ee(Seff)
# estimate beta -----------------------------------------------------------
# complete case lm to get starting value
naive.lm <- lm(Y ~ W, data = datcc)
# complete case
Bcc <- get.root(dat = dat, score = get.Scc,
start = c(naive.lm$coef, log(var(naive.lm$resid))))
Bcc
# oracle
B0 <- get.root.notrycatch(dat = dat0, score = get.Scc,
start = Bcc)
B0
# MLE
Bmle <- get.root(dat = dat, score = get.Sml, start = Bcc,
args = list(mu = mu, d.mu = d.mu, SF = SF, fy = fy,
x.nds = x.nds, x.wts = x.wts))
Bmle
# semiparametric efficient score
Beff <- get.root(dat = dat, score = get.Seff, start = Bcc,
args = list(mu = mu, d.mu = d.mu, SF = SF, fy = fy,
eta1 = eta1,
x.nds = x.nds, x.wts = x.wts,
c.nds = c.nds, c.wts = c.wts,
y.nds = y.nds, y.wts = y.wts))
Beff
# compare estimates
rbind(c(B, log(s2)), B0, Bcc, Bmle, Beff)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true (beta, log s2)
B <- c(1, 2, log(1.1))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim_data/sim0/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- c("clust", "n", "q",
"specify.x.gamma", "specify.c.gamma",
"mx", "mc", "my", "seed",
"Bor1", "Bor2", "Bor3",
"Bcc1", "Bcc2", "Bcc3",
"Bml1", "Bml2", "Bml3",
"Bsp1", "Bsp2", "Bsp3")
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("B"),
names_to = "method.param",
values_to = "estimate") %>%
mutate(method = factor(substr(method.param, 2, 3),
levels = c("or", "cc", "ml", "sp")),
specify.x.gamma = factor(specify.x.gamma,
levels = c(1, 0)),
specify.c.gamma = factor(specify.c.gamma,
levels = c(1, 0)),
param = factor(substr(method.param, 4, 4)),
B.true = B[param])
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, specify.x.gamma, specify.c.gamma, method) %>%
summarize(prop.error = mean(is.na(estimate))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
# extract simulation parameters
q <- unique(sim.out$q)
n <- unique(sim.out$n)
specify.x.gamma <- unique(sim.out$specify.x.gamma)
specify.c.gamma <- unique(sim.out$specify.c.gamma)
mx <- unique(sim.out$mx)
mc <- unique(sim.out$mc)
my <- unique(sim.out$my)
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, q, n, specify.x.gamma, specify.c.gamma, mx, mc, my))
# make labels for plots
method.labs <- c("Oracle",
"Complete Case",
"Parametric MLE",
"Semiparametric")
names(method.labs) <- c("or", "cc", "ml", "sp")
q.labs <- paste0("q = ", q)
names(q.labs) <- q
n.labs <- paste0("n = ", n)
names(n.labs) <- n
specx.labs <- c("X Correct", "X Incorrect")
names(specx.labs) <- specify.x.gamma
specc.labs <- c("C Correct", "C Incorrect")
names(specc.labs) <- specify.c.gamma
mx.labs <- paste0("mx = ", mx)
names(mx.labs) <- mx
mc.labs <- paste0("mc = ", mc)
names(mc.labs) <- mc
my.labs <- paste0("my = ", my)
names(my.labs) <- my
param.labs <- c("\u03B20", "\u03B21", "log\u03C3\u00B2")
# colorblind friendly pallette
#pal_light <- cbbPalette <- c('#BBBBBB', '#228833', '#4477AA', '#AA3377')
#pal_dark <- cbbPalette <- c('#5d5d5d', '#114419', '#223b55', '#55193b')
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# boxplot of simulated estimates
make.est.plot <- function(param., n. = 10000, est_cutoff = Inf) {
# data for plot
plot.dat <- sim.out.long %>%
filter(param == param.,
n == n.) %>%
mutate(remove = abs(estimate - B.true) > est_cutoff,
lab.y = 0.5*(B.true - est_cutoff))
# count removed observations
remove.dat <- plot.dat %>%
group_by(q, method, specify.x.gamma, specify.c.gamma, lab.y, B.true) %>%
summarise(n.remove = sum(remove, na.rm = T)) %>%
mutate(label = ifelse(n.remove > 0,
paste0(n.remove, "\n",
method.labs[method],
"\npoints outside\nrange"), ""),
lab.y = ifelse(n.remove > 0, lab.y, B.true))
# create plot
plot.dat %>%
filter(remove == F) %>%
ggplot(aes(y = estimate,
color = method,
fill = method)) +
geom_boxplot() +
geom_text(data = remove.dat,
aes(x = -0.15, y = lab.y, label = label),
size = 2, color = "black") +
geom_hline(aes(yintercept = B.true),
linetype = "dashed",
linewidth = 0.6,
color = pal_light[4]) +
facet_nested(q ~ specify.x.gamma + specify.c.gamma,
scales = "free",
labeller = labeller(q = q.labs,
specify.x.gamma = specx.labs,
specify.c.gamma = specc.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates for ",
param.labs[param.]),
subtitle = paste0("sample size n = ", n., "; ",
"mx = ", mx, "; ",
"mc = ", mc, "; ",
"my = ", my, "; ",
n.rep, " replicates per setting")) +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_manual(values = pal_light[c(1, 2, 3, 6)],
labels = method.labs) +
scale_color_manual(values = pal_dark[c(1, 2, 3, 6)],
labels = method.labs)
}
make.est.plot(param. = 1, n. = n[1])
make.est.plot(param. = 2, n. = n[1])
make.est.plot(param. = 3, n. = n[1])
make.est.plot(param. = 1, n. = n[1]) + ylim(0.5, 1.5)
make.est.plot(param. = 1, n. = n[1]) + ylim(0.5, 1.5)
make.est.plot(param. = 2, n. = n[1]) + ylim(1.5, 3.5)
make.est.plot(param. = 2, n. = n[1]) + ylim(1., 3.5)
rm(list = ls())
library(devtools)
library(statmod)
#install_github("brian-d-richardson/sparcc"); library(sparcc)
#setwd(dirname(getwd()))
load_all()
# simulation parameters ---------------------------------------------------
# baseline seed (specific to cluster)
args <- 1#commandArgs(TRUE)
base.seed <- 10^6 * as.integer(args)
# number of sims per cluster
n.sim <- 1
# output size
len.out <- 25
# parameters
n <- 10000
q <- c(0.6, 0.8)
B2 <- 4
s2 <- 1.1
x.shape <- 1.2
c.shape <- 1.2
x.mean <- 0.25
specify.x.gamma <- T#c(T, F)
specify.c.gamma <- T#c(T, F)
# run simulations ---------------------------------------------------------
# create simulation input
sim.in <- expand.grid(n = n,
q = q,
specify.x.gamma = specify.x.gamma,
specify.c.gamma = specify.c.gamma,
sim.id = 1:n.sim + base.seed)
# run simulations
sim.out <- pbapply::pbvapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
sim0(n = sim.in$n[ii],
q = sim.in$q[ii],
x.mean = x.mean,
s2 = s2,
x.shape = x.shape,
c.shape = x.shape,
specify.x.gamma = sim.in$specify.x.gamma[ii],
specify.c.gamma = sim.in$specify.c.gamma[ii],
mx = 100,
mc = 15,
my = 3,
seed = sim.in$sim.id[ii])
},
FUN.VALUE = numeric(len.out)) |>
t()
###############################################################################
###############################################################################
# Simulation 0
# Brian Richardson
# 2024-03-26
# Purpose: simulations comparing methods under misspecification with known etas
###############################################################################
###############################################################################
# prep workspace ----------------------------------------------------------
rm(list = ls())
library(devtools)
library(statmod)
#install_github("brian-d-richardson/sparcc"); library(sparcc)
#setwd(dirname(getwd()))
load_all()
# simulation parameters ---------------------------------------------------
# baseline seed (specific to cluster)
args <- 1#commandArgs(TRUE)
base.seed <- 10^6 * as.integer(args)
# number of sims per cluster
n.sim <- 1
# output size
len.out <- 25
# parameters
n <- 10000
q <- c(0.6, 0.8)
B2 <- 4
s2 <- 1.1
x.shape <- 1.2
c.shape <- 1.2
x.mean <- 0.25
specify.x.gamma <- T#c(T, F)
specify.c.gamma <- T#c(T, F)
# run simulations ---------------------------------------------------------
# create simulation input
sim.in <- expand.grid(n = sim.in$n[ii],
q = sim.in$q[ii],
B2 = sim.in$B2[ii],
s2 = sim.in$s2[ii],
x.mean = sim.in$x.mean[ii],
x.shape = sim.in$x.shape[ii],
c.shape = sim.in$x.shape[ii],
specify.x.gamma = sim.in$specify.x.gamma[ii],
specify.c.gamma = sim.in$specify.c.gamma[ii],
mx = 100,
mc = 15,
my = 3,
seed = sim.in$sim.id[ii])
rm(list = ls())
library(devtools)
library(statmod)
#install_github("brian-d-richardson/sparcc"); library(sparcc)
#setwd(dirname(getwd()))
load_all()
# baseline seed (specific to cluster)
args <- 1#commandArgs(TRUE)
base.seed <- 10^6 * as.integer(args)
# number of sims per cluster
n.sim <- 1
# output size
len.out <- 25
# parameters
n <- 10000
q <- c(0.6, 0.8)
B2 <- 4
s2 <- 1.1
x.shape <- 1.2
c.shape <- 1.2
x.mean <- 0.25
specify.x.gamma <- T#c(T, F)
specify.c.gamma <- T#c(T, F)
# create simulation input
sim.in <- expand.grid(n = sim.in$n[ii],
q = sim.in$q[ii],
B2 = sim.in$B2[ii],
s2 = sim.in$s2[ii],
x.mean = sim.in$x.mean[ii],
x.shape = sim.in$x.shape[ii],
c.shape = sim.in$x.shape[ii],
specify.x.gamma = sim.in$specify.x.gamma[ii],
specify.c.gamma = sim.in$specify.c.gamma[ii],
mx = 100,
mc = 15,
my = 3,
seed = sim.in$sim.id[ii])
# create simulation input
sim.in <- expand.grid(n = sim.in$n[ii],
q = sim.in$q[ii],
B2 = sim.in$B2[ii],
s2 = sim.in$s2[ii],
x.mean = sim.in$x.mean[ii],
x.shape = sim.in$x.shape[ii],
c.shape = sim.in$x.shape[ii],
specify.x.gamma = sim.in$specify.x.gamma[ii],
specify.c.gamma = sim.in$specify.c.gamma[ii],
mx = 100,
mc = 15,
my = 3,
seed = sim.in$sim.id[ii])
# run simulations
sim.out <- pbapply::pbvapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
sim0(n = sim.in$n[ii],
q = sim.in$q[ii],
x.mean = x.mean,
s2 = s2,
x.shape = x.shape,
c.shape = x.shape,
specify.x.gamma = sim.in$specify.x.gamma[ii],
specify.c.gamma = sim.in$specify.c.gamma[ii],
mx = 100,
mc = 15,
my = 3,
seed = sim.in$sim.id[ii])
},
FUN.VALUE = numeric(len.out)) |>
t()
rm(list = ls())
library(devtools)
library(statmod)
#install_github("brian-d-richardson/sparcc"); library(sparcc)
#setwd(dirname(getwd()))
load_all()
# simulation parameters ---------------------------------------------------
# baseline seed (specific to cluster)
args <- 1#commandArgs(TRUE)
base.seed <- 10^6 * as.integer(args)
# number of sims per cluster
n.sim <- 1
# output size
len.out <- 25
# parameters
n <- 10000
q <- c(0.6, 0.8)
B2 <- 4
s2 <- 1.1
x.shape <- 1.2
c.shape <- 1.2
x.mean <- 0.25
specify.x.gamma <- T#c(T, F)
specify.c.gamma <- T#c(T, F)
# run simulations ---------------------------------------------------------
# create simulation input
sim.in <- expand.grid(n = n,
q = q,
B2 = B2,
s2 = s2,
x.shape = x.shape,
c.shape = c.shape,
x.mean = x.mean,
specify.x.gamma = specify.x.gamma,
specify.c.gamma = specify.c.gamma,
sim.id = 1:n.sim + base.seed)
# run simulations
sim.out <- pbapply::pbvapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
sim0(n = sim.in$n[ii],
q = sim.in$q[ii],
x.mean = x.mean,
s2 = s2,
x.shape = x.shape,
c.shape = x.shape,
specify.x.gamma = sim.in$specify.x.gamma[ii],
specify.c.gamma = sim.in$specify.c.gamma[ii],
mx = 100,
mc = 15,
my = 3,
seed = sim.in$sim.id[ii])
},
FUN.VALUE = numeric(len.out)) |>
t()
###############################################################################
###############################################################################
# Simulation 0
# Brian Richardson
# 2024-03-26
# Purpose: simulations comparing methods under misspecification with known etas
###############################################################################
###############################################################################
# prep workspace ----------------------------------------------------------
rm(list = ls())
library(devtools)
library(statmod)
#install_github("brian-d-richardson/sparcc"); library(sparcc)
#setwd(dirname(getwd()))
load_all()
# simulation parameters ---------------------------------------------------
# baseline seed (specific to cluster)
args <- 1#commandArgs(TRUE)
base.seed <- 10^6 * as.integer(args)
# number of sims per cluster
n.sim <- 1
# output size
len.out <- 25
# parameters
n <- 10000
q <- c(0.6, 0.8)
B2 <- 4
s2 <- 1.1
x.shape <- 1.2
c.shape <- 1.2
x.mean <- 0.25
specify.x.gamma <- T#c(T, F)
specify.c.gamma <- T#c(T, F)
# run simulations ---------------------------------------------------------
# create simulation input
sim.in <- expand.grid(n = n,
q = q,
B2 = B2,
s2 = s2,
x.shape = x.shape,
c.shape = c.shape,
x.mean = x.mean,
specify.x.gamma = specify.x.gamma,
specify.c.gamma = specify.c.gamma,
sim.id = 1:n.sim + base.seed)
# run simulations
sim.out <- pbapply::pbvapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
sim0(n = sim.in$n[ii],
q = sim.in$q[ii],
B2 = sim.in$B2[ii],
s2 = sim.in$s2[ii],
x.mean = sim.in$x.mean[ii],
x.shape = sim.in$x.shape[ii],
c.shape = sim.in$x.shape[ii],
specify.x.gamma = sim.in$specify.x.gamma[ii],
specify.c.gamma = sim.in$specify.c.gamma[ii],
mx = 100,
mc = 15,
my = 3,
seed = sim.in$sim.id[ii])
},
FUN.VALUE = numeric(len.out)) |>
t()
View(sim.out)
View(sim.out)
