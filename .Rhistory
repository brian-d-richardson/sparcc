arguments = arguments,
theta.p = theta.p,
theta.m = theta.m,
B = B,
pb = print.progress)
# oracle nonsharp null p-value
rho.oracle <- get.rho(T.obs = T.obs, T.distr = T.nonsharp.0)
# non-decreasing infection probability function (for H0^Y = F)
g <- function(s, EY, H0Y, shift = 10) {
# under H0^Y, infection probs don't depend on # infected neighbors
if (H0Y) {
return(rep(EY, length(s)))
# otherwise, infection probs increase with # infected neighbors
} else {
ss <- plogis(s - shift) * 0.8 + 0.2
# empirical CDF transform
#U <- rank(s, ties.method = "average") / length(s)
# sharpen curve with exponent
#U_sharp <- U^gamma
# affine rescale to get mean EY
#m <- mean(U_sharp)
#a <- EY / m
#b <- EY - a * m
#ss <- a * U_sharp + b
#ss <- pmin(pmax(ss, 0), 1)  # keep in [0,1]
return(ss)
}
}
sim.dat <- simulate.data(
n = n,
tau = tau,
theta.p = theta.p,
theta.m = theta.m,
randomize = randomize,
arguments = arguments,
H0Y = H0Y,
EY = EY,
print.progress = print.progress)
# keep only time starting at 1
net.df <- sim.dat$net.df[sim.dat$net.df$time > 0,]
Z <- sim.dat$Z
# sharp null p-value ------------------------------------------------------
# compute observed T-stats (1-12)
T.obs <- get.T.all(net.df = net.df, Z = Z)
# compute distribution of T-stats under the sharp null
T.sharp <- get.T.sharp(
net.df = net.df,
randomize = randomize.bernoulli,
arguments = list(n = n, p = 0.5),
B = B,
pb = print.progress)
# sharp null p-value
rho.sharp <- get.rho(T.obs = T.obs, T.distr = T.sharp)
# oracle nonsharp null p-value --------------------------------------------
# compute distribution of T-stats under the nonsharp null, true theta
T.nonsharp.0 <- get.T.nonsharp(
net.df = net.df,
randomize = randomize,
arguments = arguments,
theta.p = theta.p,
theta.m = theta.m,
B = B,
pb = print.progress)
# oracle nonsharp null p-value
rho.oracle <- get.rho(T.obs = T.obs, T.distr = T.nonsharp.0)
sim.dat <- simulate.data(
n = n,
tau = tau,
theta.p = theta.p,
theta.m = theta.m,
randomize = randomize,
arguments = arguments,
H0Y = H0Y,
EY = EY,
print.progress = print.progress)
# keep only time starting at 1
net.df <- sim.dat$net.df[sim.dat$net.df$time > 0,]
Z <- sim.dat$Z
# sharp null p-value ------------------------------------------------------
# compute observed T-stats (1-12)
T.obs <- get.T.all(net.df = net.df, Z = Z)
# compute distribution of T-stats under the sharp null
T.sharp <- get.T.sharp(
net.df = net.df,
randomize = randomize.bernoulli,
arguments = list(n = n, p = 0.5),
B = B,
pb = print.progress)
# sharp null p-value
rho.sharp <- get.rho(T.obs = T.obs, T.distr = T.sharp)
# oracle nonsharp null p-value --------------------------------------------
# compute distribution of T-stats under the nonsharp null, true theta
T.nonsharp.0 <- get.T.nonsharp(
net.df = net.df,
randomize = randomize,
arguments = arguments,
theta.p = theta.p,
theta.m = theta.m,
B = B,
pb = print.progress)
# oracle nonsharp null p-value
rho.oracle <- get.rho(T.obs = T.obs, T.distr = T.nonsharp.0)
sim.dat <- simulate.data(
n = n,
tau = tau,
theta.p = theta.p,
theta.m = theta.m,
randomize = randomize,
arguments = arguments,
H0Y = H0Y,
EY = EY,
print.progress = print.progress)
# keep only time starting at 1
net.df <- sim.dat$net.df[sim.dat$net.df$time > 0,]
Z <- sim.dat$Z
# sharp null p-value ------------------------------------------------------
# compute observed T-stats (1-12)
T.obs <- get.T.all(net.df = net.df, Z = Z)
# compute distribution of T-stats under the sharp null
T.sharp <- get.T.sharp(
net.df = net.df,
randomize = randomize.bernoulli,
arguments = list(n = n, p = 0.5),
B = B,
pb = print.progress)
# sharp null p-value
rho.sharp <- get.rho(T.obs = T.obs, T.distr = T.sharp)
# oracle nonsharp null p-value --------------------------------------------
# compute distribution of T-stats under the nonsharp null, true theta
T.nonsharp.0 <- get.T.nonsharp(
net.df = net.df,
randomize = randomize,
arguments = arguments,
theta.p = theta.p,
theta.m = theta.m,
B = B,
pb = print.progress)
# oracle nonsharp null p-value
rho.oracle <- get.rho(T.obs = T.obs, T.distr = T.nonsharp.0)
sim.dat <- simulate.data(
n = n,
tau = tau,
theta.p = theta.p,
theta.m = theta.m,
randomize = randomize,
arguments = arguments,
H0Y = H0Y,
EY = EY,
print.progress = print.progress)
# keep only time starting at 1
net.df <- sim.dat$net.df[sim.dat$net.df$time > 0,]
Z <- sim.dat$Z
# sharp null p-value ------------------------------------------------------
# compute observed T-stats (1-12)
T.obs <- get.T.all(net.df = net.df, Z = Z)
# compute distribution of T-stats under the sharp null
T.sharp <- get.T.sharp(
net.df = net.df,
randomize = randomize.bernoulli,
arguments = list(n = n, p = 0.5),
B = B,
pb = print.progress)
# sharp null p-value
rho.sharp <- get.rho(T.obs = T.obs, T.distr = T.sharp)
# oracle nonsharp null p-value --------------------------------------------
# compute distribution of T-stats under the nonsharp null, true theta
T.nonsharp.0 <- get.T.nonsharp(
net.df = net.df,
randomize = randomize,
arguments = arguments,
theta.p = theta.p,
theta.m = theta.m,
B = B,
pb = print.progress)
# oracle nonsharp null p-value
rho.oracle <- get.rho(T.obs = T.obs, T.distr = T.nonsharp.0)
sim.dat <- simulate.data(
n = n,
tau = tau,
theta.p = theta.p,
theta.m = theta.m,
randomize = randomize,
arguments = arguments,
H0Y = H0Y,
EY = EY,
print.progress = print.progress)
# keep only time starting at 1
net.df <- sim.dat$net.df[sim.dat$net.df$time > 0,]
Z <- sim.dat$Z
# sharp null p-value ------------------------------------------------------
# compute observed T-stats (1-12)
T.obs <- get.T.all(net.df = net.df, Z = Z)
# compute distribution of T-stats under the sharp null
T.sharp <- get.T.sharp(
net.df = net.df,
randomize = randomize.bernoulli,
arguments = list(n = n, p = 0.5),
B = B,
pb = print.progress)
# sharp null p-value
rho.sharp <- get.rho(T.obs = T.obs, T.distr = T.sharp)
# oracle nonsharp null p-value --------------------------------------------
# compute distribution of T-stats under the nonsharp null, true theta
T.nonsharp.0 <- get.T.nonsharp(
net.df = net.df,
randomize = randomize,
arguments = arguments,
theta.p = theta.p,
theta.m = theta.m,
B = B,
pb = print.progress)
# oracle nonsharp null p-value
rho.oracle <- get.rho(T.obs = T.obs, T.distr = T.nonsharp.0)
sim.dat <- simulate.data(
n = n,
tau = tau,
theta.p = theta.p,
theta.m = theta.m,
randomize = randomize,
arguments = arguments,
H0Y = H0Y,
EY = EY,
print.progress = print.progress)
# keep only time starting at 1
net.df <- sim.dat$net.df[sim.dat$net.df$time > 0,]
Z <- sim.dat$Z
# sharp null p-value ------------------------------------------------------
# compute observed T-stats (1-12)
T.obs <- get.T.all(net.df = net.df, Z = Z)
# compute distribution of T-stats under the sharp null
T.sharp <- get.T.sharp(
net.df = net.df,
randomize = randomize.bernoulli,
arguments = list(n = n, p = 0.5),
B = B,
pb = print.progress)
# sharp null p-value
rho.sharp <- get.rho(T.obs = T.obs, T.distr = T.sharp)
# oracle nonsharp null p-value --------------------------------------------
# compute distribution of T-stats under the nonsharp null, true theta
T.nonsharp.0 <- get.T.nonsharp(
net.df = net.df,
randomize = randomize,
arguments = arguments,
theta.p = theta.p,
theta.m = theta.m,
B = B,
pb = print.progress)
# oracle nonsharp null p-value
rho.oracle <- get.rho(T.obs = T.obs, T.distr = T.nonsharp.0)
## define parameters
set.seed(123)                 # random number seed for reproducibility
n <- 800                      # sample size
q <- 0.6                      # censoring proportion
B <- c(1, 10, 2)              # outcome model parameters
s2 <- 1                       # Var(Y|X,Z)
x.thetas <- 0.5 * c(-1, 1)    # parameters governing X|Z and C|Z
x.gamma <- 1
c.gamma <- 2
## generate data
dat.list <- gen.data.beta(
n = n, q = q, B = B, s2 = s2,
x.thetas = x.thetas, x.gamma = x.gamma, c.gamma)
getwd()
knitr::opts_chunk$set(echo = TRUE)
## other necessary packages
library(dplyr)
library(ggplot2)
setwd("C:/Users/brich/OneDrive - University of North Carolina at Chapel Hill/Desktop/Garcia Lab/Research/Projects-Active/HDSP/sparcc")
load()
load_all()
install.packages("fitdistrplus")
install.packages("statmod")
install.packages("zipfR")
load_all()
## define parameters
set.seed(123)                 # random number seed for reproducibility
n <- 800                      # sample size
q <- 0.6                      # censoring proportion
B <- c(1, 10, 2)              # outcome model parameters
s2 <- 1                       # Var(Y|X,Z)
x.thetas <- 0.5 * c(-1, 1)    # parameters governing X|Z and C|Z
x.gamma <- 1
c.gamma <- 2
## generate data
dat.list <- gen.data.beta(
n = n, q = q, B = B, s2 = s2,
x.thetas = x.thetas, x.gamma = x.gamma, c.gamma)
datf <- dat.list$datf          # full data
dat0 <- dat.list$dat0          # oracle data
dat <- dat.list$dat            # observed data
datcc <- dat.list$datcc        # complete case data
zs <- sort(unique(dat$Z))      # unique z values
## plot full data
datf %>%
ggplot(aes(x = X,
y = Y,
color = factor(Z))) +
geom_point() +
labs(x = "True X Value",
color = "Z",
title = "Full Data") +
theme_bw() +
theme(legend.position = "bottom")
## plot observed data
dat %>%
ggplot(aes(x = W,
y = Y,
color = factor(Z))) +
geom_point() +
labs(x = "Observed W = min(X, Delta)",
color = "Z",
title = "Observed Data") +
theme_bw() +
theme(legend.position = "bottom")
sparcc.param <- sparcc(
data = dat,
xz.interaction = T,
nuisance.models = "parametric",
distr.x = "beta",
distr.c = "beta",
mx = 40,
mc = 40,
my = 5,
range.x = c(1E-6, 1-1E-6),
range.c = c(1E-6, 1-1E-6),
)
## extract estimated X|Z density
eta1 <- sparcc.param$x.model$eta1
## plot full data vs estimated density of X|Z
ggplot(data = NULL) +
geom_line(data = eta1,
aes(x = x.nds,
y = eta1,
color = factor(Z)),
linewidth = 2) +
geom_histogram(data = datf,
aes(x = X,
y = after_stat(density),
group = factor(Z),
fill = factor(Z)),
position = "identity",
alpha = 0.5,
bins = 50) +
labs(x = "X",
y = "Density",
title = "Estimated and Observed X|Z",
subtitle = "(Parametric Model)",
fill = "Z",
color = "Z") +
theme_bw() +
theme(legend.position = "bottom")
## outcome model formula
sparcc.param$outcome.model$outcome.fmla
## estimated coefficient; truth is c(1, 10, 2, 0, 0)
sparcc.est <- sparcc.param$outcome.model$coef
round(sparcc.est, 3)
## covariance matrix
sparcc.cov <- sparcc.param$outcome.model$cov
round(sparcc.cov, 3)
## new X and Z data for fitting the regression model
Xnew <- data.frame(
int = 1,
X = seq(0, 1, length = 100),
Z = rep(0:1, each = 100)) %>%
mutate(XZ = X * Z) %>%
as.matrix()
## fitted values
Yhat <- Xnew %*% sparcc.est[1:4]
## standard errors for fitted values
Yhat.se <- sqrt(diag(Xnew %*% sparcc.cov[1:4, 1:4] %*% t(Xnew)))
## data for plotting
plot.dat <- data.frame(
X = Xnew[,2],
Z = factor(Xnew[,3]),
Yhat = Yhat,
Ylower = Yhat - qnorm(0.975) * Yhat.se,
Yupper = Yhat + qnorm(0.975) * Yhat.se)
## plot fitted lines and 95% confidence intervals
ggplot(data = plot.dat,
aes(x = X,
y = Yhat,
ymin = Ylower,
ymax = Yupper,
color = Z,
fill = Z)) +
geom_line() +
geom_ribbon(alpha = 0.5) +
labs(x = "X",
y = "Estimated Regression Line (95% CI)",
color = "Z",
fill = "Z",
title = "SPARCC Outcome Model Results",
subtitle = "(Using Parametric Nuisance Models)") +
theme_bw() +
theme(legend.position = "bottom")
sparcc.nonpar <- sparcc(
data = dat,
xz.interaction = T,
nuisance.models = "nonparametric",
deg = 3,
m.knots = 5,
mx = 40,
mc = 40,
my = 5,
range.x = c(1E-6, 1-1E-6),
range.c = c(1E-6, 1-1E-6),
)
## extract nonparametrically estimated X|Z density
eta1.np <- sparcc.nonpar$x.model$eta1
## plot full data vs estimated density of X|Z
ggplot(data = NULL) +
geom_line(data = eta1.np,
aes(x = x.nds,
y = eta1,
color = factor(Z)),
linewidth = 2) +
geom_histogram(data = datf,
aes(x = X,
y = after_stat(density),
group = factor(Z),
fill = factor(Z)),
position = "identity",
alpha = 0.5,
bins = 50) +
labs(x = "X",
y = "Density",
title = "Estimated and Observed X|Z",
subtitle = "(Nonparametric Model)",
fill = "Z",
color = "Z") +
theme_bw() +
theme(legend.position = "bottom")
## estimated coefficient; truth is c(1, 10, 2, 0, 0)
sparcc.est.np <- sparcc.nonpar$outcome.model$coef
round(sparcc.est.np, 3)
## covariance matrix
sparcc.cov.np <- sparcc.nonpar$outcome.model$cov
round(sparcc.cov.np, 3)
## fitted values
Yhat.np <- Xnew %*% sparcc.est.np[1:4]
## standard errors for fitted values
Yhat.se.np <- sqrt(diag(Xnew %*% sparcc.cov.np[1:4, 1:4] %*% t(Xnew)))
## data for plotting
plot.dat.np <- data.frame(
X = Xnew[,2],
Z = factor(Xnew[,3]),
Yhat = Yhat.np,
Ylower = Yhat.np - qnorm(0.975) * Yhat.se.np,
Yupper = Yhat.np + qnorm(0.975) * Yhat.se.np)
## plot fitted lines and 95% confidence intervals
ggplot(data = plot.dat.np,
aes(x = X,
y = Yhat,
ymin = Ylower,
ymax = Yupper,
color = Z,
fill = Z)) +
geom_line() +
geom_ribbon(alpha = 0.5) +
labs(x = "X",
y = "Estimated Regression Line (95% CI)",
color = "Z",
fill = "Z",
title = "SPARCC Outcome Model Results",
subtitle = "(Using Nonparametric Nuisance Models)") +
theme_bw() +
theme(legend.position = "bottom")
knitr::opts_chunk$set(echo = TRUE)
use_mit_license()
## install the package
devtools::install_github(repo = "brian-d-richardson/sparcc",
ref = "main")
knitr::opts_chunk$set(echo = TRUE)
## install the package
devtools::install_github(repo = "brian-d-richardson/sparcc",
ref = "main")
## install the package
devtools::install_github(repo = "brian-d-richardson/sparcc",
ref = "main")
devtools::check()
install.packages("Rtools")
pkgbuild::check_build_tools(debug = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## install the package
devtools::install_github(repo = "brian-d-richardson/sparcc",
ref = "main")
devtools::check()
devtools::check()
file.show(".../00install.out")
file.show("C:/Users/brich/AppData/Local/Temp/RtmpgD34B2/file3b583de232b2/sparcc.Rcheck/00install.out")
devtools::document()
## install the package
devtools::install_github(repo = "brian-d-richardson/sparcc",
ref = "main")
## install the package
devtools::install_github(repo = "brian-d-richardson/sparcc",
ref = "main")
devtools::install(build = TRUE, args = "--no-lazy")
fs::dir_ls("R", glob = "*.R") |> purrr::walk(source)
devtools::install(build = TRUE, args = "--no-lazy-load")
file.show("C:/Users/brich/AppData/Local/Temp/RtmpWKVrds/sparcc.Rcheck/00install.out")
devtools::check(keep_source = TRUE)
devtools::check(keep_source = TRUE)
rm(list = ls())
devtools::check(args = "--keep-source")
install.packages(c("rmarkdown", "knitr"))
quarto::quarto_update()
knitr::opts_chunk$set(echo = TRUE)
## install the package
devtools::install_github(repo = "brian-d-richardson/sparcc",
ref = "main")
