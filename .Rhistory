setwd("C:/Users/brich/OneDrive - University of North Carolina at Chapel Hill/Desktop/Garcia Lab/Research/Projects-Active/HDSP/sparcc")
library(devtools)
load_all()
check()
document()
rm(list = ls())
# indicator for running on cluster
on.cluster <- F
if (on.cluster) {
setwd(dirname(getwd()))
args <- commandArgs(TRUE)          # cluster id
} else {
args <- 1
}
library(devtools)
library(statmod)
library(fitdistrplus)
library(dplyr)
library(numDeriv)
library(zipfR)
load_all()
source("sim1_function.R")
getwd()
source("simulation/sim1_function.R")
base.seed <- 10^6 * as.integer(args) # baseline seed (specific to cluster)
len.out <- 95                        # output size
n.sim <- 100                         # number of sims per cluster
n <- c(800, 8000)                    # sample size
q <- c(0.4, 0.8)                     # censoring proportion
## create simulation input
sim.in <- expand.grid(n = n,
q = q,
sim.id = 1:n.sim + base.seed)
ii - 1
ii = 1
tryCatch(
expr =
sim1(
n = sim.in$n[ii],
q = sim.in$q[ii],
seed = sim.in$sim.id[ii]),
error = function(e) c(
n = sim.in$n[ii],
q = sim.in$q[ii],
seed = sim.in$sim.id[ii],
rep(NA, len.out - 3)))
knitr::opts_chunk$set(echo = TRUE)
## install the package
devtools::install_github(repo = "brian-d-richardson/sparcc",
ref = "main")
## load the package
library(sparcc)
## other necessary packages
library(dplyr)
library(ggplot2)
## define parameters
set.seed(123)                 # random number seed for reproducibility
n <- 800                      # sample size
q <- 0.6                      # censoring proportion
B <- c(1, 10, 2)              # outcome model parameters
s2 <- 1                       # Var(Y|X,Z)
x.thetas <- 0.5 * c(-1, 1)    # parameters governing X|Z and C|Z
x.gamma <- 1
c.gamma <- 2
## generate data
dat.list <- gen.data.beta(
n = n, q = q, B = B, s2 = s2,
x.thetas = x.thetas, x.gamma = x.gamma, c.gamma)
datf <- dat.list$datf          # full data
dat0 <- dat.list$dat0          # oracle data
dat <- dat.list$dat            # observed data
datcc <- dat.list$datcc        # complete case data
zs <- sort(unique(dat$Z))      # unique z values
## plot full data
datf %>%
ggplot(aes(x = X,
y = Y,
color = factor(Z))) +
geom_point() +
labs(x = "True X Value",
color = "Z",
title = "Full Data") +
theme_bw() +
theme(legend.position = "bottom")
## plot observed data
dat %>%
ggplot(aes(x = W,
y = Y,
color = factor(Z))) +
geom_point() +
labs(x = "Observed W = min(X, Delta)",
color = "Z",
title = "Observed Data") +
theme_bw() +
theme(legend.position = "bottom")
sparcc.param <- sparcc(
data = dat,
xz.interaction = T,
nuisance.models = "parametric",
distr.x = "beta",
distr.c = "beta",
mx = 40,
mc = 40,
my = 5,
range.x = c(1E-6, 1-1E-6),
range.c = c(1E-6, 1-1E-6),
)
??gauss.quad
## load the package
library(sparcc)
## other necessary packages
library(dplyr)
library(ggplot2)
library(statmod)
## define parameters
set.seed(123)                 # random number seed for reproducibility
n <- 800                      # sample size
q <- 0.6                      # censoring proportion
B <- c(1, 10, 2)              # outcome model parameters
s2 <- 1                       # Var(Y|X,Z)
x.thetas <- 0.5 * c(-1, 1)    # parameters governing X|Z and C|Z
x.gamma <- 1
c.gamma <- 2
## generate data
dat.list <- gen.data.beta(
n = n, q = q, B = B, s2 = s2,
x.thetas = x.thetas, x.gamma = x.gamma, c.gamma)
datf <- dat.list$datf          # full data
dat0 <- dat.list$dat0          # oracle data
dat <- dat.list$dat            # observed data
datcc <- dat.list$datcc        # complete case data
zs <- sort(unique(dat$Z))      # unique z values
## plot observed data
dat %>%
ggplot(aes(x = W,
y = Y,
color = factor(Z))) +
geom_point() +
labs(x = "Observed W = min(X, Delta)",
color = "Z",
title = "Observed Data") +
theme_bw() +
theme(legend.position = "bottom")
sparcc.param <- sparcc(
data = dat,
xz.interaction = T,
nuisance.models = "parametric",
distr.x = "beta",
distr.c = "beta",
mx = 40,
mc = 40,
my = 5,
range.x = c(1E-6, 1-1E-6),
range.c = c(1E-6, 1-1E-6),
)
## extract estimated X|Z density
eta1 <- sparcc.param$x.model$eta1
