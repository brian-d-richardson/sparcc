alpha = 0.5,
bins = 50) +
theme_bw() +
theme(legend.position = "bottom")
## extract estimated X|Z density
eta1 <- sparcc.param$x.model$eta1
## plot full data vs estimated density
ggplot(data = NULL) +
geom_line(data = eta1,
aes(x = x.nds,
y = x.wts,
color = factor(Z))) +
geom_histogram(data = datf,
aes(x = X,
group = factor(Z),
fill = factor(Z)),
position = "identity",
alpha = 0.5,
bins = 50) +
theme_bw() +
theme(legend.position = "bottom")
## plot full data vs estimated density
ggplot(data = NULL) +
geom_line(data = eta1,
aes(x = x.nds,
y = eta1,
color = factor(Z))) +
geom_histogram(data = datf,
aes(x = X,
group = factor(Z),
fill = factor(Z)),
position = "identity",
alpha = 0.5,
bins = 50) +
theme_bw() +
theme(legend.position = "bottom")
## plot full data vs estimated density
ggplot(data = NULL) +
geom_line(data = eta1,
aes(x = x.nds,
y = eta1,
color = factor(Z))) +
geom_histogram(data = datf,
aes(x = X,
y = after_stat(density),
group = factor(Z),
fill = factor(Z)),
position = "identity",
alpha = 0.5,
bins = 50) +
theme_bw() +
theme(legend.position = "bottom")
## plot full data vs estimated density
ggplot(data = NULL) +
geom_line(data = eta1,
aes(x = x.nds,
y = eta1,
color = factor(Z)),
linewidth = 2) +
geom_histogram(data = datf,
aes(x = X,
y = after_stat(density),
group = factor(Z),
fill = factor(Z)),
position = "identity",
alpha = 0.5,
bins = 50) +
theme_bw() +
theme(legend.position = "bottom")
## plot full data vs estimated density
ggplot(data = NULL) +
geom_line(data = eta1,
aes(x = x.nds,
y = eta1,
color = factor(Z)),
linewidth = 2) +
geom_histogram(data = datf,
aes(x = X,
y = after_stat(density),
group = factor(Z),
fill = factor(Z)),
position = "identity",
alpha = 0.5,
bins = 50) +
labs(x = "X",
y = "Density",
title = "Estimated and Observed X|Z") +
theme_bw() +
theme(legend.position = "bottom")
## plot full data vs estimated density
ggplot(data = NULL) +
geom_line(data = eta1,
aes(x = x.nds,
y = eta1,
color = factor(Z)),
linewidth = 2) +
geom_histogram(data = datf,
aes(x = X,
y = after_stat(density),
group = factor(Z),
fill = factor(Z)),
position = "identity",
alpha = 0.5,
bins = 50) +
labs(x = "X",
y = "Density",
title = "Estimated and Observed X|Z",
fill = "Z",
color = "Z") +
theme_bw() +
theme(legend.position = "bottom")
sparcc.param$outcome.model
sparcc.param$outcome.model$outcome.fmla
sparcc.param$outcome.model$coef
sparcc.param$outcome.model$cov
## outcome model
outcome.fmla <- if (xz.interaction) {
Y ~ X * Z
} else {
Y ~ X + Z
}
xz.interaction = T
## outcome model
outcome.fmla <- if (xz.interaction) {
Y ~ X * Z
} else {
Y ~ X + Z
}
outcome.fmla
gsub(outcome.fmla, X, W)
gsub(outcome.fmla, X, "W")
gsub(outcome.fmla, "X", "W")
gsub(as.character(outcome.fmla), "X", "W")
load_all()
sparcc.param <- sparcc(
data = dat,
xz.interaction = T,
nuisance.models = "parametric",
distr.x = "beta",
distr.c = "beta",
mx = 40,
mc = 40,
my = 5,
range.x = c(1E-6, 1-1E-6),
range.c = c(1E-6, 1-1E-6),
)
## extract estimated X|Z density
eta1 <- sparcc.param$x.model$eta1
## plot full data vs estimated density of X|Z
ggplot(data = NULL) +
geom_line(data = eta1,
aes(x = x.nds,
y = eta1,
color = factor(Z)),
linewidth = 2) +
geom_histogram(data = datf,
aes(x = X,
y = after_stat(density),
group = factor(Z),
fill = factor(Z)),
position = "identity",
alpha = 0.5,
bins = 50) +
labs(x = "X",
y = "Density",
title = "Estimated and Observed X|Z",
fill = "Z",
color = "Z") +
theme_bw() +
theme(legend.position = "bottom")
## outcome model formula
sparcc.param$outcome.model$outcome.fmla
## estimated coefficient; truth is c(1, 10, 2, 0)
sparcc.param$outcome.model$coef
## covariance matrix
sparcc.param$outcome.model$cov
## covariance matrix
round(sparcc.param$outcome.model$cov, 3)
## estimated coefficient; truth is c(1, 10, 2, 0, 0)
round(sparcc.param$outcome.model$coef, 3)
## estimated coefficient; truth is c(1, 10, 2, 0, 0)
sparcc.est <- sparcc.param$outcome.model$coef
round(sparcc.est, 3)
## covariance matrix
sparcc.cov <- sparcc.param$outcome.model$cov
round(sparcc.cov, 3)
seq(0, 1, 100)
## calculate fitted values and confidence interval
plot.dat <- expand.grid(
Z = c(0, 1),
X = seq(0, 1, 0.01)
)
plot.dat
## calculate fitted values and confidence interval
plot.dat <- expand.grid(
Z = c(0, 1),
X = seq(0, 1, 0.01)) %>%
as.data.frame()
## calculate fitted values and confidence interval
Xnew <- expand.grid(
Z = c(0, 1),
X = seq(0, 1, 0.01)) %>%
as.data.frame()
## calculate fitted values and confidence interval
ZXnew <- expand.grid(
Z = c(0, 1),
X = seq(0, 1, 0.01)) %>%
as.data.frame()
Yhat <- ZXnew %*% B
## calculate fitted values and confidence interval
ZXnew <- expand.grid(
Z = c(0, 1),
X = seq(0, 1, 0.01))
Yhat <- ZXnew %*% sparcc.est
sparcc.est
ZXnew
## calculate fitted values and confidence interval
Xnew <- data.frame(
int = 1,
X = seq(0, 1, length = 100),
Z = rep(0:1, each = 100)) %>%
mutate(XZ = X * Z) %>%
as.matrix()
Yhat <- Xnew %*% sparcc.est
sparcc.est
Yhat <- Xnew %*% sparcc.est[1:4]
Yhat.se <- sqrt(diag(Xnew %*% sparcc.cov[1:4, 1:4] %*% t(Xnew)))
## calculate fitted values and confidence interval
Xnew <- data.frame(
int = 1,
X = seq(0, 1, length = 100),
Z = rep(0:1, each = 100)) %>%
mutate(XZ = X * Z) %>%
as.matrix()
Yhat <- Xnew %*% sparcc.est[1:4]
Yhat.se <- sqrt(diag(Xnew %*% sparcc.cov[1:4, 1:4] %*% t(Xnew)))
## data for plotting
plot.dat <- data.frame(
X = Xnew[,2],
Z = factor(Xnew[,3]),
Yhat = Yhat,
Ylower = Yhat - qnorm(0.975) * Yhat.se,
Yupper = Yhat + qnorm(0.975) * Yhat.se)
## plot fitted lines and 95% confidence intervals
ggplot(data = plot.dat,
aes(x = X,
y = Yhat,
ymin = Ylower,
ymax = Yupper,
color = Z,
fill = Z)) +
geom_line() +
geom_ribbon(alpha = 0.5) +
labs(x = "X",
color = "Z",
fill = "Z") +
theme_bw()
## plot fitted lines and 95% confidence intervals
ggplot(data = plot.dat,
aes(x = X,
y = Yhat,
ymin = Ylower,
ymax = Yupper,
color = Z,
fill = Z)) +
geom_line() +
geom_ribbon(alpha = 0.5) +
labs(x = "X",
y = "Estimated Regression Line"
color = "Z",
## plot fitted lines and 95% confidence intervals
ggplot(data = plot.dat,
aes(x = X,
y = Yhat,
ymin = Ylower,
ymax = Yupper,
color = Z,
fill = Z)) +
geom_line() +
geom_ribbon(alpha = 0.5) +
labs(x = "X",
y = "Estimated Regression Line",
color = "Z",
fill = "Z") +
theme_bw() +
theme(legend.position = "bottom")
load_all()
## define parameters
set.seed(123)                 # random number seed for reproducibility
n <- 200                      # sample size
q <- 0.6                      # censoring proportion
B <- c(1, 10, 2)              # outcome model parameters
s2 <- 1                       # Var(Y|X,Z)
x.thetas <- 0.5 * c(-1, 1)    # parameters governing X|Z and C|Z
x.gamma <- 1
c.gamma <- 2
## generate data
dat.list <- gen.data.beta(
n = n, q = q, B = B, s2 = s2,
x.thetas = x.thetas, x.gamma = x.gamma, c.gamma)
datf <- dat.list$datf          # full data
dat0 <- dat.list$dat0          # oracle data
dat <- dat.list$dat            # observed data
datcc <- dat.list$datcc        # complete case data
zs <- sort(unique(dat$Z))      # unique z values
## plot full data
datf %>%
ggplot(aes(x = X,
y = Y,
color = factor(Z))) +
geom_point() +
labs(x = "True X Value",
color = "Z",
title = "Full Data") +
theme_bw() +
theme(legend.position = "bottom")
## plot full data
dat %>%
ggplot(aes(x = W,
y = Y,
color = factor(Z))) +
geom_point() +
labs(x = "Observed W = min(X, Delta)",
color = "Z",
title = "Full Data") +
theme_bw() +
theme(legend.position = "bottom")
## plot observed data
dat %>%
ggplot(aes(x = W,
y = Y,
color = factor(Z))) +
geom_point() +
labs(x = "Observed W = min(X, Delta)",
color = "Z",
title = "Observed Data") +
theme_bw() +
theme(legend.position = "bottom")
sparcc.param <- sparcc(
data = dat,
xz.interaction = T,
nuisance.models = "parametric",
distr.x = "beta",
distr.c = "beta",
mx = 40,
mc = 40,
my = 5,
range.x = c(1E-6, 1-1E-6),
range.c = c(1E-6, 1-1E-6),
)
## extract estimated X|Z density
eta1 <- sparcc.param$x.model$eta1
## plot full data vs estimated density of X|Z
ggplot(data = NULL) +
geom_line(data = eta1,
aes(x = x.nds,
y = eta1,
color = factor(Z)),
linewidth = 2) +
geom_histogram(data = datf,
aes(x = X,
y = after_stat(density),
group = factor(Z),
fill = factor(Z)),
position = "identity",
alpha = 0.5,
bins = 50) +
labs(x = "X",
y = "Density",
title = "Estimated and Observed X|Z",
fill = "Z",
color = "Z") +
theme_bw() +
theme(legend.position = "bottom")
## outcome model formula
sparcc.param$outcome.model$outcome.fmla
## estimated coefficient; truth is c(1, 10, 2, 0, 0)
sparcc.est <- sparcc.param$outcome.model$coef
round(sparcc.est, 3)
## covariance matrix
sparcc.cov <- sparcc.param$outcome.model$cov
round(sparcc.cov, 3)
## new X and Z data for fitting the regression model
Xnew <- data.frame(
int = 1,
X = seq(0, 1, length = 100),
Z = rep(0:1, each = 100)) %>%
mutate(XZ = X * Z) %>%
as.matrix()
## fitted values
Yhat <- Xnew %*% sparcc.est[1:4]
## standard errors for fitted values
Yhat.se <- sqrt(diag(Xnew %*% sparcc.cov[1:4, 1:4] %*% t(Xnew)))
## data for plotting
plot.dat <- data.frame(
X = Xnew[,2],
Z = factor(Xnew[,3]),
Yhat = Yhat,
Ylower = Yhat - qnorm(0.975) * Yhat.se,
Yupper = Yhat + qnorm(0.975) * Yhat.se)
## plot fitted lines and 95% confidence intervals
ggplot(data = plot.dat,
aes(x = X,
y = Yhat,
ymin = Ylower,
ymax = Yupper,
color = Z,
fill = Z)) +
geom_line() +
geom_ribbon(alpha = 0.5) +
labs(x = "X",
y = "Estimated Regression Line",
color = "Z",
fill = "Z") +
theme_bw() +
theme(legend.position = "bottom")
sparcc.param <- sparcc(
data = dat,
xz.interaction = T,
nuisance.models = "nonparametric",
deg = 3,
m.knots = 5,
mx = 40,
mc = 40,
my = 5,
range.x = c(1E-6, 1-1E-6),
range.c = c(1E-6, 1-1E-6),
)
## extract nonparametrically estimated X|Z density
eta1.np <- sparcc.nonpar$x.model$eta1
sparcc.nonpar <- sparcc.param
## extract nonparametrically estimated X|Z density
eta1.np <- sparcc.nonpar$x.model$eta1
## plot full data vs estimated density of X|Z
ggplot(data = NULL) +
geom_line(data = eta1.np,
aes(x = x.nds,
y = eta1,
color = factor(Z)),
linewidth = 2) +
geom_histogram(data = datf,
aes(x = X,
y = after_stat(density),
group = factor(Z),
fill = factor(Z)),
position = "identity",
alpha = 0.5,
bins = 50) +
labs(x = "X",
y = "Density",
title = "Estimated and Observed X|Z",
fill = "Z",
color = "Z") +
theme_bw() +
theme(legend.position = "bottom")
## outcome model formula
sparcc.nonpar$outcome.model$outcome.fmla
## estimated coefficient; truth is c(1, 10, 2, 0, 0)
sparcc.est.np <- sparcc.nonpar$outcome.model$coef
round(sparcc.est.np, 3)
## covariance matrix
sparcc.cov.np <- sparcc.nonpar$outcome.model$cov
round(sparcc.cov.np, 3)
## fitted values
Yhat.np <- Xnew %*% sparcc.est.np[1:4]
## standard errors for fitted values
Yhat.se.np <- sqrt(diag(Xnew %*% sparcc.cov.np[1:4, 1:4] %*% t(Xnew)))
## data for plotting
plot.dat.np <- data.frame(
X = Xnew[,2],
Z = factor(Xnew[,3]),
Yhat = Yhat,
Ylower = Yhat.np - qnorm(0.975) * Yhat.se.np,
Yupper = Yhat.np + qnorm(0.975) * Yhat.se.np)
## fitted values
Yhat.np <- Xnew %*% sparcc.est.np[1:4]
## standard errors for fitted values
Yhat.se.np <- sqrt(diag(Xnew %*% sparcc.cov.np[1:4, 1:4] %*% t(Xnew)))
## data for plotting
plot.dat.np <- data.frame(
X = Xnew[,2],
Z = factor(Xnew[,3]),
Yhat = Yhat.np,
Ylower = Yhat.np - qnorm(0.975) * Yhat.se.np,
Yupper = Yhat.np + qnorm(0.975) * Yhat.se.np)
## plot fitted lines and 95% confidence intervals
ggplot(data = plot.dat.np,
aes(x = X,
y = Yhat,
ymin = Ylower,
ymax = Yupper,
color = Z,
fill = Z)) +
geom_line() +
geom_ribbon(alpha = 0.5) +
labs(x = "X",
y = "Estimated Regression Line (95% CI)",
color = "Z",
fill = "Z",
title = "SPARCC Outcome Model Results",
subtitle = "(Using Nonparametric Nuisance Models)") +
theme_bw() +
theme(legend.position = "bottom")
document()
knitr::opts_chunk$set(echo = TRUE)
## install the package
devtools::install_github(repo = "brian-d-richardson/sparcc",
ref = "main")
knitr::opts_chunk$set(echo = TRUE)
## install the package
devtools::install_github(repo = "brian-d-richardson/sparcc",
ref = "main")
