c.gamma = c.gamma,
x.theta.scale = x.theta.scale,
sim.id = 1:n.sim + base.seed)
# run simulations
sim.out <- pbapply::pbvapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
tryCatch(
expr = sim2(
n = sim.in$n[ii],
q = sim.in$q[ii],
B2 = sim.in$B2[ii],
s2 = sim.in$s2[ii],
x.theta.scale = sim.in$x.theta.scale[ii],
x.gamma = sim.in$x.gamma[ii],
c.gamma = sim.in$c.gamma[ii],
mx = mx,
mc = mc,
my = my,
seed = sim.in$sim.id[ii]),
error = function(e) c(
n = sim.in$n[ii],
q = sim.in$q[ii],
B2 = sim.in$B2[ii],
s2 = sim.in$s2[ii],
rep(NA, len.out - 4)))
},
FUN.VALUE = numeric(len.out)) |>
t()
34/39
knitr::opts_chunk$set(echo = TRUE)
## install the package
devtools::install_github(repo = "brian-d-richardson/mismex",
ref = "main")
## load the package
library(mismex)
library(devtools)
## load additional packages
library(MASS)
library(dplyr)
library(tidyverse)
library(ggplot2)
## define parameters
n = 2000                                  # sample size
seed = 1                                  # random number seed
mc.seed <- 123                            # MCCS seed
cov.e <- 0.02                             # var(epsilon)
inv.link <- inv.ident                     # inverse link
d.inv.link <- d.inv.ident                 # derivative of inverse link
g <- c(0.35, 0.15, 0.25, 0.2, 0.05, 0.1)  # outcome model parameters
formula <- "~A*L1 + A*L2"                 # outcome model formula
ps.formula <- "~L1 + L2"                  # propensity score model formula
ipw.formula <- "~A"                       # MSM formula
set.seed(seed)
L1 <- rbinom(n, 1, 0.5)                                  # confounder 1
L2 <- rnorm(n, 0, 0.16)                                  # confounder 2
EA <- 0.1 - 0.1*L1 + 0.3*L2                              # E(A|L)
A <- rnorm(n, EA, sqrt(0.04))                            # exposure
EY <- inv.link(model.matrix(as.formula(formula)) %*% g)  # mean of outcome
set.seed(seed)
L1 <- rbinom(n, 1, 0.5)                                  # confounder 1
L2 <- rnorm(n, 0, 0.16)                                  # confounder 2
EA <- 0.1 - 0.1*L1 + 0.3*L2                              # E(A|L)
A <- rnorm(n, EA, sqrt(0.04))                            # exposure
EY[EY < 0] <- 0; EY[EY > 1] <- 1                         # constrain EY
Y <- rbinom(n, 1, EY)                                    # outcome
Astar <- A + rnorm(n, 0, sqrt(cov.e))                    # mismeasured A
datstar <- data.frame(Y, A = Astar, L1, L2)              # mismeasured data
head(datstar, 5)
## generate data
set.seed(seed)
L1 <- rbinom(n, 1, 0.5)                                  # confounder 1
L2 <- rnorm(n, 0, 0.16)                                  # confounder 2
EA <- 0.1 - 0.1*L1 + 0.3*L2                              # E(A|L)
A <- rnorm(n, EA, sqrt(0.04))                            # exposure
EY[EY < 0] <- 0; EY[EY > 1] <- 1                         # constrain EY
Y <- rbinom(n, 1, EY)                                    # outcome
Astar <- A + rnorm(n, 0, sqrt(cov.e))                    # mismeasured A
datstar <- data.frame(Y, A = Astar, L1, L2)              # mismeasured data
head(datstar, 5)
hist)A
hist(A)
a <- seq(-0.5, 0.5, 10)                                             # grid of exposures
a
?seq()
a <- seq(-0.5, 0.5, length.out = 10)                                             # grid of exposures
a
## generate data
set.seed(seed)
L1 <- rbinom(n, 1, 0.5)                                  # confounder 1
L2 <- rnorm(n, 0, 0.16)                                  # confounder 2
EA <- 0.1 - 0.1*L1 + 0.3*L2                              # E(A|L)
A <- rnorm(n, EA, sqrt(0.04))                            # exposure
a <- seq(-0.5, 0.5, length.out = 10)                     # grid of exposures
EY[EY < 0] <- 0; EY[EY > 1] <- 1                         # constrain EY
Y <- rbinom(n, 1, EY)                                    # outcome
Astar <- A + rnorm(n, 0, sqrt(cov.e))                    # mismeasured A
datstar <- data.frame(Y, A = Astar, L1, L2)              # mismeasured data
head(datstar, 5)
## g-formula arguments
gfmla.args <- list(formula = formula,
inv.link = inv.link,
d.inv.link = d.inv.link)
## naive estimator
gfmla.naive <- fit.glm(data = datstar,
args = gfmla.args,
return.var = F)$est
## assess MCCS estimating function over grid of B values
gfmla.B.tuning <- tune.B(
get.psi = get.psi.glm,
data = datstar,
cov.e = cov.e,
BB = seq(1, 50, by = 2),
args = gfmla.args,
mc.seed = 123)
gfmla.B.tuning$plot
var(Astar)
var(A)
round(a, 2)
## number of MC replicates
B <- 30
## G-formula
gfmla.res <- fit.gfmla.mccs(
data = datstar,
a = a,
cov.e = cov.e,
B = B,
mc.seed = mc.seed,
return.var = TRUE,
args = gfmla.args)
cbind(est = round(gfmla.res$est, 2),
stde = round(sqrt(diag(gfmla.res$var)), 2),
bc.stde = round(sqrt(diag(gfmla.res$bc.var)), 2))
g
gfmla.naive
n = 10^5
B = 1
cov.e = 1
cov.e = 0
## generate data
set.seed(seed)
L1 <- rbinom(n, 1, 0.5)                                  # confounder 1
L2 <- rnorm(n, 0, 0.16)                                  # confounder 2
EA <- 0.1 - 0.1*L1 + 0.3*L2                              # E(A|L)
A <- rnorm(n, EA, sqrt(0.04))                            # exposure
a <- seq(-0.5, 0.5, length.out = 10)                     # grid of exposures
EY[EY < 0] <- 0; EY[EY > 1] <- 1                         # constrain EY
Y <- rbinom(n, 1, EY)                                    # outcome
Astar <- A + rnorm(n, 0, sqrt(cov.e))                    # mismeasured A
datstar <- data.frame(Y, A = Astar, L1, L2)              # mismeasured data
head(datstar, 5)
## number of MC replicates
B <- 30
## G-formula
gfmla.res <- fit.gfmla.mccs(
data = datstar,
a = a,
cov.e = cov.e,
B = B,
mc.seed = mc.seed,
return.var = TRUE,
args = gfmla.args)
cbind(est = round(gfmla.res$est, 2),
stde = round(sqrt(diag(gfmla.res$var)), 2),
bc.stde = round(sqrt(diag(gfmla.res$bc.var)), 2))
B = 1
gfmla.res <- fit.gfmla.mccs(
data = datstar,
a = a,
cov.e = cov.e,
B = B,
mc.seed = mc.seed,
return.var = TRUE,
args = gfmla.args)
cbind(est = round(gfmla.res$est, 2),
stde = round(sqrt(diag(gfmla.res$var)), 2),
bc.stde = round(sqrt(diag(gfmla.res$bc.var)), 2))
g
formula
## define parameters
n = 2000                                  # sample size
seed = 1                                  # random number seed
mc.seed <- 123                            # MCCS seed
cov.e <- 0.02                             # var(epsilon)
inv.link <- inv.ident                     # inverse link
d.inv.link <- d.inv.ident                 # derivative of inverse link
g <- c(0.35, 0.15, 0.25, 0.2, 0.05, 0.1)  # outcome model parameters
formula <- "~A*L1 + A*L2"                 # outcome model formula
ps.formula <- "~L1 + L2"                  # propensity score model formula
ipw.formula <- "~A"                       # MSM formula
cov.e = 0
## generate data
set.seed(seed)
L1 <- rbinom(n, 1, 0.5)                                  # confounder 1
L2 <- rnorm(n, 0, 0.16)                                  # confounder 2
EA <- 0.1 - 0.1*L1 + 0.3*L2                              # E(A|L)
A <- rnorm(n, EA, sqrt(0.04))                            # exposure
a <- seq(-0.5, 0.5, length.out = 10)                     # grid of exposures
EY <- inv.link(model.matrix(as.formula(formula)) %*% g)  # mean of outcome
EY[EY < 0] <- 0; EY[EY > 1] <- 1                         # constrain EY
Y <- rbinom(n, 1, EY)                                    # outcome
Astar <- A + rnorm(n, 0, sqrt(cov.e))                    # mismeasured A
datstar <- data.frame(Y, A = Astar, L1, L2)              # mismeasured data
head(datstar, 5)
gfmla.res <- fit.gfmla.mccs(
data = datstar,
a = a,
cov.e = cov.e,
B = B,
mc.seed = mc.seed,
return.var = TRUE,
args = gfmla.args)
cbind(est = round(gfmla.res$est, 2),
stde = round(sqrt(diag(gfmla.res$var)), 2),
bc.stde = round(sqrt(diag(gfmla.res$bc.var)), 2))
n = 10000
## generate data
set.seed(seed)
L1 <- rbinom(n, 1, 0.5)                                  # confounder 1
L2 <- rnorm(n, 0, 0.16)                                  # confounder 2
EA <- 0.1 - 0.1*L1 + 0.3*L2                              # E(A|L)
A <- rnorm(n, EA, sqrt(0.04))                            # exposure
a <- seq(-0.5, 0.5, length.out = 10)                     # grid of exposures
EY <- inv.link(model.matrix(as.formula(formula)) %*% g)  # mean of outcome
EY[EY < 0] <- 0; EY[EY > 1] <- 1                         # constrain EY
Y <- rbinom(n, 1, EY)                                    # outcome
Astar <- A + rnorm(n, 0, sqrt(cov.e))                    # mismeasured A
datstar <- data.frame(Y, A = Astar, L1, L2)              # mismeasured data
head(datstar, 5)
## G-formula
gfmla.res <- fit.gfmla.mccs(
data = datstar,
a = a,
cov.e = cov.e,
B = B,
mc.seed = mc.seed,
return.var = TRUE,
args = gfmla.args)
## G-formula
gfmla.res <- fit.gfmla.mccs(
data = datstar,
a = a,
cov.e = cov.e,
B = B,
mc.seed = mc.seed,
return.var = TRUE,
args = gfmla.args)
cbind(est = round(gfmla.res$est, 2),
stde = round(sqrt(diag(gfmla.res$var)), 2),
bc.stde = round(sqrt(diag(gfmla.res$bc.var)), 2))
g
knitr::opts_chunk$set(echo = TRUE)
## load the package
library(mismex)
library(devtools)
## load additional packages
library(MASS)
library(dplyr)
library(tidyverse)
library(ggplot2)
## define parameters
n = 2000                                  # sample size
seed = 1                                  # random number seed
mc.seed <- 123                            # MCCS seed
cov.e <- 0.02                             # var(epsilon)
inv.link <- inv.ident                     # inverse link
d.inv.link <- d.inv.ident                 # derivative of inverse link
g <- c(0.35, 0.15, 0.25, 0.2, 0.05, 0.1)  # outcome model parameters
formula <- "~A*L1 + A*L2"                 # outcome model formula
ps.formula <- "~L1 + L2"                  # propensity score model formula
ipw.formula <- "~A"                       # MSM formula
## generate data
set.seed(seed)
L1 <- rbinom(n, 1, 0.5)                                  # confounder 1
L2 <- rnorm(n, 0, 0.16)                                  # confounder 2
EA <- 0.1 - 0.1*L1 + 0.3*L2                              # E(A|L)
A <- rnorm(n, EA, sqrt(0.04))                            # exposure
a <- seq(-0.5, 0.5, length.out = 10)                     # grid of exposures
EY <- inv.link(model.matrix(as.formula(formula)) %*% g)  # mean of outcome
EY[EY < 0] <- 0; EY[EY > 1] <- 1                         # constrain EY
Y <- rbinom(n, 1, EY)                                    # outcome
Astar <- A + rnorm(n, 0, sqrt(cov.e))                    # mismeasured A
datstar <- data.frame(Y, A = Astar, L1, L2)              # mismeasured data
head(datstar, 5)
## g-formula arguments
gfmla.args <- list(formula = formula,
inv.link = inv.link,
d.inv.link = d.inv.link)
## naive estimator
gfmla.naive <- fit.glm(data = datstar,
args = gfmla.args,
return.var = F)$est
## assess MCCS estimating function over grid of B values
gfmla.B.tuning <- tune.B(
get.psi = get.psi.glm,
data = datstar,
cov.e = cov.e,
BB = seq(1, 50, by = 2),
args = gfmla.args,
mc.seed = 123)
gfmla.B.tuning$plot
## number of MC replicates
B <- 30
## G-formula
gfmla.res <- fit.gfmla.mccs(
data = datstar,
a = a,
cov.e = cov.e,
B = B,
mc.seed = mc.seed,
return.var = TRUE,
args = gfmla.args)
cbind(est = round(gfmla.res$est, 2),
stde = round(sqrt(diag(gfmla.res$var)), 2),
bc.stde = round(sqrt(diag(gfmla.res$bc.var)), 2))
## IPW arguments
ipw.args <- list(formula = ipw.formula,
ps.formula = ps.formula,
inv.link = inv.link,
d.inv.link = d.inv.link)
## IPW estimation
ipw.res <- fit.ipw.mccs(
data = datstar,
cov.e = cov.e,
B = B,
mc.seed = mc.seed,
return.var = TRUE,
args = ipw.args)
cbind(est = round(ipw.res$est, 2),
stde = round(sqrt(diag(ipw.res$var)), 2),
bc.stde = round(sqrt(diag(ipw.res$bc.var)), 2))
## arguments for double robust estimation
dr.args <- list(formula = formula,
ps.formula = ps.formula,
inv.link = inv.link,
d.inv.link = d.inv.link)
## Double Robust
dr.res <- fit.dr.mccs(
data = datstar,
a = a,
cov.e = cov.e,
B = B,
mc.seed = mc.seed,
return.var = TRUE,
args = dr.args)
cbind(est = round(dr.res$est, 2),
stde = round(sqrt(diag(dr.res$var)), 2),
bc.stde = round(sqrt(diag(dr.res$bc.var)), 2))
# simulate data
cov.e <- 0.05                                   # measurement error variance
inv.link <- inv.ident                           # inverse link
d.inv.link <- d.inv.ident                       # deriv of inv link
g <- c(0, 0.25, 0.5, -0.5, 1)                   # outcome model parameters
formula <- "~A + I(A^2) + I(A^3) + L"           # outcome model formula
args <- list(formula = formula,                 # model fitting arguments
inv.link = inv.link,
d.inv.link = d.inv.link)
set.seed(seed)
L <- runif(n)                                                  # confounder
A <- rnorm(n, L, sqrt(0.25))
Y <- rnorm(n, EY, 0.16)                                        # outcome
Astar <- A + rnorm(n, 0, sqrt(cov.e))                          # mismeasured A
dat0 <- data.frame(Y, A, L)                 # oracle data
datstar <- data.frame(Y, Astar, L)          # mismeasured data
colnames(dat0) <- colnames(datstar) <- c("Y", "A", "L")
a <- seq(-1, 2, length = 10)                # grid of exposure values
hist)A
hist(A)
apply(A, 2, var) / apply(Astar, 2, var)
var(A) / var(Astar)
# plot data
ggplot(NULL, aes(x = A, y = Y)) +
geom_point() +
ggtitle("Cubic MSM Data",
subtitle = "Using True Exposure Values")
ggplot(NULL, aes(x = Astar, y = Y)) +
geom_point() +
ggtitle("Cubic MSM Data",
subtitle = "Using Measured Exposure Values")
# plot data
ggplot(NULL, aes(x = A, y = Y)) +
geom_point() +
ggtitle("Cubic MSM Data",
subtitle = "Using True Exposure Values")
ggplot(NULL, aes(x = Astar, y = Y)) +
geom_point() +
ggtitle("Cubic MSM Data",
subtitle = "Using Measured Exposure Values")
# plot data
ggplot(NULL, aes(x = A, y = Y)) +
geom_point() +
ggtitle("Cubic MSM Data",
subtitle = "Using True Exposure Values")
# simulate data
cov.e <- 0.05                                   # measurement error variance
inv.link <- inv.ident                           # inverse link
d.inv.link <- d.inv.ident                       # deriv of inv link
g <- c(0, 0.25, 0.5, -0.5, 1)                   # outcome model parameters
formula <- "~A + I(A^2) + I(A^3) + L"           # outcome model formula
args <- list(formula = formula,                 # model fitting arguments
inv.link = inv.link,
d.inv.link = d.inv.link)
set.seed(seed)
L <- runif(n)                                                  # confounder
A <- rnorm(n, L, sqrt(0.25))
EY <- inv.link(model.matrix(as.formula(formula)) %*% g)        # mean of outcome
Y <- rnorm(n, EY, 0.16)                                        # outcome
Astar <- A + rnorm(n, 0, sqrt(cov.e))                          # mismeasured A
dat0 <- data.frame(Y, A, L)                 # oracle data
datstar <- data.frame(Y, Astar, L)          # mismeasured data
colnames(dat0) <- colnames(datstar) <- c("Y", "A", "L")
a <- seq(-1, 2, length = 10)                # grid of exposure values
# plot data
ggplot(NULL, aes(x = A, y = Y)) +
geom_point() +
ggtitle("Cubic MSM Data",
subtitle = "Using True Exposure Values")
ggplot(NULL, aes(x = Astar, y = Y)) +
geom_point() +
ggtitle("Cubic MSM Data",
subtitle = "Using Measured Exposure Values")
## G-formula for cubic MSM
gfmla.mccs.cubic <- fit.gfmla.mccs(data = datstar, a = a,
args = args, cov.e = cov.e,
B = B, mc.seed = mc.seed)
cbind(est = round(gfmla.mccs.cubic$est, 2),
stde = round(sqrt(diag(gfmla.mccs.cubic$var)), 2),
bc.stde = round(sqrt(diag(gfmla.mccs.cubic$bc.var)), 2))
## set parameters
n = 2000                                  # sample size
seed = 1                                  # random number seed
mc.seed <- 123                            # MCCS seed
cov.e <- 0.02                             # var(epsilon)
inv.link <- inv.ident                         # inverse link
d.inv.link <- d.inv.ident                     # deriv of inv link
g <- c(0.35, 0.15, 0.25, 0.2, 0.05, 0.1)      # outcome model parameters
formula <- "~A*L1 + A*L2"                     # outcome model formula
ps.formula <- "~L1 + L2"                      # propensity score model formula
ipw.formula <- "~A"                           # ipw.formula
## simulate data
set.seed(seed)
cov.e <- vare
L1 <- rbinom(n, 1, 0.5)                                  # confounder 1
L2 <- rnorm(n, 0, 0.16)                                  # confounder 2
EA <- 0.1 - 0.1*L1 + 0.3*L2                              # E(A|L)
A <- rnorm(n, EA, sqrt(0.04))                            # exposure
Astar <- A + rnorm(n, 0, sqrt(cov.e))                    # mismeasured A
a <- c(0, 1)                                             # grid of exposures
EY <- inv.link(model.matrix(as.formula(formula)) %*% g)  # mean of outcome
EY[EY < 0] <- 0; EY[EY > 1] <- 1                         # constrain EY
Y <- rbinom(n, 1, EY)                                    # outcome
R <- rbinom(n, 1, pi.cc)                                 # c-c sampling
A[R == 0 & Y == 0] <-
Astar[R == 0 & Y == 0] <- NA
dat0 <- data.frame(Y, A, L1, L2, R)                      # oracle data
EY <- inv.link(model.matrix(as.formula(formula)) %*% g)  # mean of outcome
EY[EY < 0] <- 0; EY[EY > 1] <- 1                         # constrain EY
Y <- rbinom(n, 1, EY)                                    # outcome
R <- rbinom(n, 1, pi.cc)                                 # c-c sampling
pi.cc <- 0.25                                 # sampling proportion
seed = 1                                      # random number seed
cov.e <- 0.02                                 # var(epsilon)
g <- c(0.35, 0.15, 0.25, 0.2, 0.05, 0.1)      # outcome model parameters
g <- c(0.35, 0.15, 0.25, 0.2, 0.05, 0.1)      # outcome model parameters
formula <- "~A*L1 + A*L2"                     # outcome model formula
ipw.formula <- "~A"                           # ipw.formula
## simulate data
set.seed(seed)
cov.e <- vare
L1 <- rbinom(n, 1, 0.5)                                  # confounder 1
L2 <- rnorm(n, 0, 0.16)                                  # confounder 2
EA <- 0.1 - 0.1*L1 + 0.3*L2                              # E(A|L)
A <- rnorm(n, EA, sqrt(0.04))                            # exposure
Astar <- A + rnorm(n, 0, sqrt(cov.e))                    # mismeasured A
a <- c(0, 1)                                             # grid of exposures
EY <- inv.link(model.matrix(as.formula(formula)) %*% g)  # mean of outcome
EY[EY < 0] <- 0; EY[EY > 1] <- 1                         # constrain EY
Y <- rbinom(n, 1, EY)                                    # outcome
R <- rbinom(n, 1, pi.cc)                                 # c-c sampling
A[R == 0 & Y == 0] <-
Astar[R == 0 & Y == 0] <- NA
dat0 <- data.frame(Y, A, L1, L2, R)                      # oracle data
datstar <- data.frame(Y, A = Astar, L1, L2, R)           # measured data
args <- list(formula = formula,                          # arguments for fitting
ps.formula = ps.formula,
inv.link = inv.link,
d.inv.link = d.inv.link)
## estimate case-cohort weights
pi.cc.hat <- mean(datstar$R[datstar$Y == 0])
datstar$cc.wts <- (1 - datstar$Y) * datstar$R / pi.cc.hat + Y
## corrected doubly robust estimator
dr.cc.mccs <- fit.dr.mccs(data = datstar, args = args, a = a,
cov.e = cov.e, B = B, mc.seed = mc.seed)
cbind(est = round(dr.cc.mccs$est, 2),
stde = round(sqrt(diag(dr.cc.mccs$var)), 2),
bc.stde = round(sqrt(diag(dr.cc.mccs$bc.var)), 2))
a <- seq(-0.5, 0.5, length.out = 10)                     # grid of exposures
## estimate case-cohort weights
pi.cc.hat <- mean(datstar$R[datstar$Y == 0])
datstar$cc.wts <- (1 - datstar$Y) * datstar$R / pi.cc.hat + Y
## corrected doubly robust estimator
dr.cc.mccs <- fit.dr.mccs(data = datstar, args = args, a = a,
cov.e = cov.e, B = B, mc.seed = mc.seed)
## estimate case-cohort weights
pi.cc.hat <- mean(datstar$R[datstar$Y == 0])
datstar$cc.wts <- (1 - datstar$Y) * datstar$R / pi.cc.hat + Y
## corrected doubly robust estimator
dr.cc.mccs <- fit.dr.mccs(data = datstar, args = args, a = a,
cov.e = cov.e, B = B, mc.seed = mc.seed)
cbind(est = round(dr.cc.mccs$est, 2),
stde = round(sqrt(diag(dr.cc.mccs$var)), 2),
bc.stde = round(sqrt(diag(dr.cc.mccs$bc.var)), 2))
