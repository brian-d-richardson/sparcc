mc <- unique(sim.out$mc)
my <- unique(sim.out$my)
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, q, n, x.shape, c.shape, mx, mc, my))
# make labels for plots
method.labs <- c("Oracle",
"Complete Case",
"Parametric MLE",
"Semiparametric")
names(method.labs) <- c("or", "cc", "ml", "sp")
q.labs <- paste0("q = ", q)
names(q.labs) <- q
n.labs <- paste0("n = ", n)
names(n.labs) <- n
shapex.labs <- c("X Correct", "X Incorrect")
names(shapex.labs) <- x.shape
shapec.labs <- c("C Correct", "C Incorrect")
names(shapec.labs) <- c.shape
mx.labs <- paste0("mx = ", mx)
names(mx.labs) <- mx
mc.labs <- paste0("mc = ", mc)
names(mc.labs) <- mc
my.labs <- paste0("my = ", my)
names(my.labs) <- my
param.labs <- c("\u03B20", "\u03B21", "log\u03C3\u00B2")
# colorblind friendly pallette
#pal_light <- cbbPalette <- c('#BBBBBB', '#228833', '#4477AA', '#AA3377')
#pal_dark <- cbbPalette <- c('#5d5d5d', '#114419', '#223b55', '#55193b')
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# boxplot of simulated estimates
make.est.plot <- function(param., n. = 10000, est_cutoff = Inf) {
# data for plot
plot.dat <- sim.out.long %>%
filter(param == param.,
n == n.) %>%
mutate(remove = abs(estimate - B.true) > est_cutoff,
lab.y = 0.5*(B.true - est_cutoff))
# count removed observations
remove.dat <- plot.dat %>%
group_by(q, method, x.shape, c.shape, lab.y, B.true) %>%
summarise(n.remove = sum(remove, na.rm = T)) %>%
mutate(label = ifelse(n.remove > 0,
paste0(n.remove, "\n",
method.labs[method],
"\npoints outside\nrange"), ""),
lab.y = ifelse(n.remove > 0, lab.y, B.true))
# create plot
plot.dat %>%
filter(remove == F) %>%
ggplot(aes(y = estimate,
color = method,
fill = method)) +
geom_boxplot() +
geom_text(data = remove.dat,
aes(x = -0.15, y = lab.y, label = label),
size = 2, color = "black") +
geom_hline(aes(yintercept = B.true),
linetype = "dashed",
linewidth = 0.6,
color = pal_light[4]) +
facet_nested(q ~ x.shape + c.shape,
scales = "free",
labeller = labeller(q = q.labs,
x.shape = shapex.labs,
c.shape = shapec.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates for ",
param.labs[param.]),
subtitle = paste0("sample size n = ", n., "; ",
"mx = ", mx, "; ",
"mc = ", mc, "; ",
"my = ", my, "; ",
n.rep, " replicates per setting")) +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_manual(values = pal_light[c(1, 2, 3, 6)],
labels = method.labs) +
scale_color_manual(values = pal_dark[c(1, 2, 3, 6)],
labels = method.labs)
}
make.est.plot(param. = 1, n. = n[1])
make.est.plot(param. = 2, n. = n[1])
make.est.plot(param. = 3, n. = n[1])
make.est.plot(param. = 1, n. = n[1]) + ylim(0.75, 1.25)
make.est.plot(param. = 2, n. = n[1]) + ylim(1, 3)
make.est.plot(param. = 3, n. = n[1]) + ylim(-0.2, 0.35)
make.est.plot(param. = 3, n. = n[1]) + ylim(2, 3)
make.est.plot(param. = 3, n. = n[1]) + ylim(2, 2.3)
make.est.plot(param. = 3, n. = n[1]) + ylim(2, 2.26)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true (beta, log s2)
B <- c(1, 2, log(8))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim_data/sim1/estetas_meanX1_shape1_2_var0_01_n10000/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- c("clust", "n", "q", "x.shape", "c.shape",
"mx", "mc", "my", "seed",
"Bor1", "Bor2", "Bor3",
"Bcc1", "Bcc2", "Bcc3",
"Bml1", "Bml2", "Bml3",
"Bsp1", "Bsp2", "Bsp3")
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("B"),
names_to = "method.param",
values_to = "estimate") %>%
mutate(method = factor(substr(method.param, 2, 3),
levels = c("or", "cc", "ml", "sp")),
param = factor(substr(method.param, 4, 4)),
B.true = B[param])
# true (beta, log s2)
B <- c(1, 2, log(0.01))
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, x.shape, c.shape, method) %>%
summarize(prop.error = mean(is.na(estimate))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
# extract simulation parameters
q <- unique(sim.out$q)
n <- unique(sim.out$n)
x.shape <- unique(sim.out$x.shape)
c.shape <- unique(sim.out$c.shape)
mx <- unique(sim.out$mx)
mc <- unique(sim.out$mc)
my <- unique(sim.out$my)
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, q, n, x.shape, c.shape, mx, mc, my))
# make labels for plots
method.labs <- c("Oracle",
"Complete Case",
"Parametric MLE",
"Semiparametric")
names(method.labs) <- c("or", "cc", "ml", "sp")
q.labs <- paste0("q = ", q)
names(q.labs) <- q
n.labs <- paste0("n = ", n)
names(n.labs) <- n
shapex.labs <- c("X Correct", "X Incorrect")
names(shapex.labs) <- x.shape
shapec.labs <- c("C Correct", "C Incorrect")
names(shapec.labs) <- c.shape
mx.labs <- paste0("mx = ", mx)
names(mx.labs) <- mx
mc.labs <- paste0("mc = ", mc)
names(mc.labs) <- mc
my.labs <- paste0("my = ", my)
names(my.labs) <- my
param.labs <- c("\u03B20", "\u03B21", "log\u03C3\u00B2")
# colorblind friendly pallette
#pal_light <- cbbPalette <- c('#BBBBBB', '#228833', '#4477AA', '#AA3377')
#pal_dark <- cbbPalette <- c('#5d5d5d', '#114419', '#223b55', '#55193b')
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# boxplot of simulated estimates
make.est.plot <- function(param., n. = 10000, est_cutoff = Inf) {
# data for plot
plot.dat <- sim.out.long %>%
filter(param == param.,
n == n.) %>%
mutate(remove = abs(estimate - B.true) > est_cutoff,
lab.y = 0.5*(B.true - est_cutoff))
# count removed observations
remove.dat <- plot.dat %>%
group_by(q, method, x.shape, c.shape, lab.y, B.true) %>%
summarise(n.remove = sum(remove, na.rm = T)) %>%
mutate(label = ifelse(n.remove > 0,
paste0(n.remove, "\n",
method.labs[method],
"\npoints outside\nrange"), ""),
lab.y = ifelse(n.remove > 0, lab.y, B.true))
# create plot
plot.dat %>%
filter(remove == F) %>%
ggplot(aes(y = estimate,
color = method,
fill = method)) +
geom_boxplot() +
geom_text(data = remove.dat,
aes(x = -0.15, y = lab.y, label = label),
size = 2, color = "black") +
geom_hline(aes(yintercept = B.true),
linetype = "dashed",
linewidth = 0.6,
color = pal_light[4]) +
facet_nested(q ~ x.shape + c.shape,
scales = "free",
labeller = labeller(q = q.labs,
x.shape = shapex.labs,
c.shape = shapec.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates for ",
param.labs[param.]),
subtitle = paste0("sample size n = ", n., "; ",
"mx = ", mx, "; ",
"mc = ", mc, "; ",
"my = ", my, "; ",
n.rep, " replicates per setting")) +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_manual(values = pal_light[c(1, 2, 3, 6)],
labels = method.labs) +
scale_color_manual(values = pal_dark[c(1, 2, 3, 6)],
labels = method.labs)
}
make.est.plot(param. = 1, n. = n[1])
make.est.plot(param. = 2, n. = n[1])
make.est.plot(param. = 3, n. = n[1])
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true (beta, log s2)
B <- c(1, 2, log(0.01))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim_data/sim1/estetas_meanX1_shape1_2_var0_01_n10000/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- c("clust", "n", "q", "x.shape", "c.shape",
"mx", "mc", "my", "seed",
"Bor1", "Bor2", "Bor3",
"Bcc1", "Bcc2", "Bcc3",
"Bml1", "Bml2", "Bml3",
"Bsp1", "Bsp2", "Bsp3")
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("B"),
names_to = "method.param",
values_to = "estimate") %>%
mutate(method = factor(substr(method.param, 2, 3),
levels = c("or", "cc", "ml", "sp")),
param = factor(substr(method.param, 4, 4)),
B.true = B[param])
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, x.shape, c.shape, method) %>%
summarize(prop.error = mean(is.na(estimate))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
# extract simulation parameters
q <- unique(sim.out$q)
n <- unique(sim.out$n)
x.shape <- unique(sim.out$x.shape)
c.shape <- unique(sim.out$c.shape)
mx <- unique(sim.out$mx)
mc <- unique(sim.out$mc)
my <- unique(sim.out$my)
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, q, n, x.shape, c.shape, mx, mc, my))
# make labels for plots
method.labs <- c("Oracle",
"Complete Case",
"Parametric MLE",
"Semiparametric")
names(method.labs) <- c("or", "cc", "ml", "sp")
q.labs <- paste0("q = ", q)
names(q.labs) <- q
n.labs <- paste0("n = ", n)
names(n.labs) <- n
shapex.labs <- c("X Correct", "X Incorrect")
names(shapex.labs) <- x.shape
shapec.labs <- c("C Correct", "C Incorrect")
names(shapec.labs) <- c.shape
mx.labs <- paste0("mx = ", mx)
names(mx.labs) <- mx
mc.labs <- paste0("mc = ", mc)
names(mc.labs) <- mc
my.labs <- paste0("my = ", my)
names(my.labs) <- my
param.labs <- c("\u03B20", "\u03B21", "log\u03C3\u00B2")
# colorblind friendly pallette
#pal_light <- cbbPalette <- c('#BBBBBB', '#228833', '#4477AA', '#AA3377')
#pal_dark <- cbbPalette <- c('#5d5d5d', '#114419', '#223b55', '#55193b')
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# boxplot of simulated estimates
make.est.plot <- function(param., n. = 10000, est_cutoff = Inf) {
# data for plot
plot.dat <- sim.out.long %>%
filter(param == param.,
n == n.) %>%
mutate(remove = abs(estimate - B.true) > est_cutoff,
lab.y = 0.5*(B.true - est_cutoff))
# count removed observations
remove.dat <- plot.dat %>%
group_by(q, method, x.shape, c.shape, lab.y, B.true) %>%
summarise(n.remove = sum(remove, na.rm = T)) %>%
mutate(label = ifelse(n.remove > 0,
paste0(n.remove, "\n",
method.labs[method],
"\npoints outside\nrange"), ""),
lab.y = ifelse(n.remove > 0, lab.y, B.true))
# create plot
plot.dat %>%
filter(remove == F) %>%
ggplot(aes(y = estimate,
color = method,
fill = method)) +
geom_boxplot() +
geom_text(data = remove.dat,
aes(x = -0.15, y = lab.y, label = label),
size = 2, color = "black") +
geom_hline(aes(yintercept = B.true),
linetype = "dashed",
linewidth = 0.6,
color = pal_light[4]) +
facet_nested(q ~ x.shape + c.shape,
scales = "free",
labeller = labeller(q = q.labs,
x.shape = shapex.labs,
c.shape = shapec.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates for ",
param.labs[param.]),
subtitle = paste0("sample size n = ", n., "; ",
"mx = ", mx, "; ",
"mc = ", mc, "; ",
"my = ", my, "; ",
n.rep, " replicates per setting")) +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_manual(values = pal_light[c(1, 2, 3, 6)],
labels = method.labs) +
scale_color_manual(values = pal_dark[c(1, 2, 3, 6)],
labels = method.labs)
}
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true (beta, log s2)
B <- c(1, 2, log(0.01))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim_data/sim1/estetas_meanX1_shape1_2_var0_01_n10000/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- c("clust", "n", "q", "x.shape", "c.shape",
"mx", "mc", "my", "seed",
"Bor1", "Bor2", "Bor3",
"Bcc1", "Bcc2", "Bcc3",
"Bml1", "Bml2", "Bml3",
"Bsp1", "Bsp2", "Bsp3")
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with("B"),
names_to = "method.param",
values_to = "estimate") %>%
mutate(method = factor(substr(method.param, 2, 3),
levels = c("or", "cc", "ml", "sp")),
param = factor(substr(method.param, 4, 4)),
B.true = B[param])
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, x.shape, c.shape, method) %>%
summarize(prop.error = mean(is.na(estimate))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
# extract simulation parameters
q <- unique(sim.out$q)
n <- unique(sim.out$n)
x.shape <- unique(sim.out$x.shape)
c.shape <- unique(sim.out$c.shape)
mx <- unique(sim.out$mx)
mc <- unique(sim.out$mc)
my <- unique(sim.out$my)
n.rep <- nrow(sim.out) /
n_distinct(dplyr::select(sim.out, q, n, x.shape, c.shape, mx, mc, my))
# make labels for plots
method.labs <- c("Oracle",
"Complete Case",
"Parametric MLE",
"Semiparametric")
names(method.labs) <- c("or", "cc", "ml", "sp")
q.labs <- paste0("q = ", q)
names(q.labs) <- q
n.labs <- paste0("n = ", n)
names(n.labs) <- n
shapex.labs <- c("X Correct", "X Incorrect")
names(shapex.labs) <- x.shape
shapec.labs <- c("C Correct", "C Incorrect")
names(shapec.labs) <- c.shape
mx.labs <- paste0("mx = ", mx)
names(mx.labs) <- mx
mc.labs <- paste0("mc = ", mc)
names(mc.labs) <- mc
my.labs <- paste0("my = ", my)
names(my.labs) <- my
param.labs <- c("\u03B20", "\u03B21", "log\u03C3\u00B2")
# colorblind friendly pallette
#pal_light <- cbbPalette <- c('#BBBBBB', '#228833', '#4477AA', '#AA3377')
#pal_dark <- cbbPalette <- c('#5d5d5d', '#114419', '#223b55', '#55193b')
pal_light <- c('#EE6677', '#228833', '#4477AA', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB')
pal_dark <- c('#991122', '#114419', '#223b55', '#6b611d', '#117799', '#55193b', '#5d5d5d')
# boxplot of simulated estimates
make.est.plot <- function(param., n. = 10000, est_cutoff = Inf) {
# data for plot
plot.dat <- sim.out.long %>%
filter(param == param.,
n == n.) %>%
mutate(remove = abs(estimate - B.true) > est_cutoff,
lab.y = 0.5*(B.true - est_cutoff))
# count removed observations
remove.dat <- plot.dat %>%
group_by(q, method, x.shape, c.shape, lab.y, B.true) %>%
summarise(n.remove = sum(remove, na.rm = T)) %>%
mutate(label = ifelse(n.remove > 0,
paste0(n.remove, "\n",
method.labs[method],
"\npoints outside\nrange"), ""),
lab.y = ifelse(n.remove > 0, lab.y, B.true))
# create plot
plot.dat %>%
filter(remove == F) %>%
ggplot(aes(y = estimate,
color = method,
fill = method)) +
geom_boxplot() +
geom_text(data = remove.dat,
aes(x = -0.15, y = lab.y, label = label),
size = 2, color = "black") +
geom_hline(aes(yintercept = B.true),
linetype = "dashed",
linewidth = 0.6,
color = pal_light[4]) +
facet_nested(q ~ x.shape + c.shape,
scales = "free",
labeller = labeller(q = q.labs,
x.shape = shapex.labs,
c.shape = shapec.labs)) +
labs(y = "Parameter Estimate",
fill = "Method",
color = "Method") +
ggtitle(paste0("Empirical Distribution of Parameter Estimates for ",
param.labs[param.]),
subtitle = paste0("sample size n = ", n., "; ",
"mx = ", mx, "; ",
"mc = ", mc, "; ",
"my = ", my, "; ",
n.rep, " replicates per setting")) +
theme_bw() +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()) +
scale_fill_manual(values = pal_light[c(1, 2, 3, 6)],
labels = method.labs) +
scale_color_manual(values = pal_dark[c(1, 2, 3, 6)],
labels = method.labs)
}
make.est.plot(param. = 1, n. = n[1])
make.est.plot(param. = 2, n. = n[1])
make.est.plot(param. = 3, n. = n[1])
make.est.plot(param. = 1, n. = n[1]) + ylim(0.98, 1.02)
make.est.plot(param. = 2, n. = n[1]) + ylim(1.96, 2.04)
make.est.plot(param. = 3, n. = n[1]) + ylim(-7, -3)
make.est.plot(param. = 3, n. = n[1]) + ylim(-6, -4)
make.est.plot(param. = 3, n. = n[1]) + ylim(-5, -4)
