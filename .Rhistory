sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "lccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "ccccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0, 0m
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "ccccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
add_header_above(c(" " = 4,
"q = 0.4" = 4,
"q = 0.8" = 4))
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -3)))) %>%
kable(digits = c(0, 0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "ccccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE) %>%
add_header_above(c(" " = 4,
"q = 0.4" = 4,
"q = 0.8" = 4))
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -4)))) %>%
kable(digits = c(0, 0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "ccccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE) %>%
add_header_above(c(" " = 4,
"q = 0.4" = 4,
"q = 0.8" = 4))
kbl1
make.table.allparam(format = "latex")
# table with all parameters
make.table.allparam <- function(format = "html") {
tbl1 <- sim.out.long %>%
mutate(Param = ifelse(param == 1, "$\\beta_1$",
ifelse(param == 2, "$\\beta_2$",
ifelse(param == 3, "$\\beta_3$",
ifelse(param == 4, "$\\log\\sigma^2$"))))) %>%
group_by(q, Param, method, nuis.x, nuis.c) %>%
summarise(v1_Bias = 10*mean(B - B.true, na.rm = T),
v2_ESE = 10*sd(B, na.rm = T),
v3_ASE = 10*mean(V, na.rm = T),
v4_Cov = 100*mean(ci.if.cov, na.rm = T)) %>%
gather(key, value, v1_Bias:v4_Cov) %>%
unite(Group, q, key) %>%
spread(Group, value)
kbl1 <- setNames(tbl1, c("Param", "Method", "X|Z", "C|Z",
sub(".+_", "", tail(names(tbl1), -4)))) %>%
kable(digits = c(0, 0, 0, 0,
2, 2, 2, 1,
2, 2, 2, 1),
format = format,
align = "ccccrrrrrrrr",
booktabs = T) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE) %>%
add_header_above(c(" " = 4,
"q = 0.4" = 4,
"q = 0.8" = 4))
return(kbl1)
}
make.table.allparam()
make.table.allparam(format = "latex")
t3 <- make.table.allparam(format = "latex")
t3
rm(list = ls())
# indicator for running on cluster
on.cluster <- F
if (on.cluster) {
setwd(dirname(getwd()))
args <- commandArgs(TRUE)          # cluster id
} else {
args <- 1
}
library(devtools)
library(statmod)
library(fitdistrplus)
library(DALSM)
library(dplyr)
library(numDeriv)
load_all()
base.seed <- 10^6 * as.integer(args) # baseline seed (specific to cluster)
len.out <- 123                       # output size
n.sim <- 1                           # number of sims per cluster
n <- 8000                            # sample size
q <- 0.8                             # censoring proportion
rm(list = ls())
# indicator for running on cluster
on.cluster <- F
if (on.cluster) {
setwd(dirname(getwd()))
args <- commandArgs(TRUE)          # cluster id
} else {
args <- 1
}
library(devtools)
library(statmod)
library(fitdistrplus)
library(DALSM)
library(dplyr)
library(numDeriv)
load_all()
base.seed <- 10^6 * as.integer(args) # baseline seed (specific to cluster)
len.out <- 123                       # output size
n.sim <- 1                           # number of sims per cluster
n <- 8000                            # sample size
q <- 0.8                             # censoring proportion
## create simulation input
sim.in <- expand.grid(n = n,
q = q,
sim.id = 1:n.sim + base.seed)
## run simulations (roughly 6 minutes per replicate)
sim.out <- pbapply::pbvapply(
X = 1:nrow(sim.in),
FUN = function(ii) {
tryCatch(
expr = sim1(
n = sim.in$n[ii],
q = sim.in$q[ii],
seed = sim.in$sim.id[ii]),
error = function(e) c(
n = sim.in$n[ii],
q = sim.in$q[ii],
seed = sim.in$sim.id[ii],
rep(NA, len.out - 3)))
},
FUN.VALUE = numeric(len.out)) |>
t()
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(stringr)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(ggplot2)
library(stringr)
library(ggh4x)
library(scales)
library(ggthemes)
library(kableExtra)
# true beta
B.true <- c(1, 10, 2, log(1))
# load simulation results from each of 10 clusters
sim.out.list <- lapply(
X = 0:9,
FUN = function(clust) {
cbind(clust,
read.csv(paste0(
"sim1_data/sd",
clust, ".csv")))
})
# combine simulation results into 1 data frame
sim.out <- bind_rows(sim.out.list)
colnames(sim.out) <- gsub(".B", ".", colnames(sim.out))
colnames(sim.out) <- gsub("B2", "trueB2", colnames(sim.out))
# make long data frame
sim.out.long <- sim.out %>%
pivot_longer(cols = starts_with(c("B", "V")),
names_to = "method.param",
values_to = "estimate") %>%
mutate(estimate = ifelse(abs(estimate) > 100, NA, estimate),
name = factor(str_sub(method.param, 1, 1)),
method = factor(str_sub(method.param, 3, 4),
levels = c("sp", "ml", "cc", "or"),
labels = c("Semipar", "MLE", "CC", "Oracle")),
nuis.x = factor(str_sub(str_sub(
gsub("[.]", "", method.param), 4, -2), 1, 1),
levels = c("", "1", "0",  "2"),
labels = c("-", "T", "F", "Nonpar")),
nuis.c = factor(str_sub(str_sub(
gsub("[.]", "", method.param), 4, -2), 2, 2),
levels = c("", "1", "0",  "2"),
labels = c("-", "T", "F", "Nonpar")),
param = factor(str_sub(method.param, -1, -1)),
B.true = B.true[param]) %>%
dplyr::select(-c(method.param)) %>%
group_by(clust, n, q, name, method, nuis.x, nuis.c, param) %>%
mutate(id = row_number()) %>%
pivot_wider(names_from = name,
values_from = estimate,
id_cols = c(clust, n, q, method, nuis.x, nuis.c,
param, B.true, id)) %>%
mutate(ci.lower = B - qnorm(0.975) * V,
ci.upper = B + qnorm(0.975) * V,
ci.cov = B.true >= ci.lower & B.true <= ci.upper)
# check for simulations with errors
sim.out.long %>%
filter(param == 1) %>%
group_by(q, n, method, nuis.x, nuis.c) %>%
summarize(n.error = sum(is.na(B)),
prop.error = mean(is.na(B))) %>%
filter(prop.error > 0) %>%
kable(digits = 3) %>%
kable_styling("striped")
param. = 2
tbl1 <- sim.out.long %>%
filter(param == param.) %>%
group_by(q, method, nuis.x, nuis.c) %>%
summarise(v1_Bias = 10*mean(B - B.true, na.rm = T),
v2_ESE = 10*sd(B, na.rm = T),
v3_ASE = 10*mean(V, na.rm = T),
v4_Cov = 100*mean(ci.cov, na.rm = T)) %>%
gather(key, value, v1_Bias:v4_Cov) %>%
unite(Group, q, key) %>%
spread(Group, value)
View(tbl1)
round(tbl1, 2)
rm(list = ls())
library(dplyr)
library(ggplot2)
library(kableExtra)
setwd("C:/Users/Brian Richardson/OneDrive - University of North Carolina at Chapel Hill/Desktop/Garcia Lab/Research/Projects-Active/HDSP/Analysis")
res.tms <- read.csv("derived-data/tms-results/res.csv")
res.sdmt <- read.csv("derived-data/sdmt-results/res.csv")
res.cuhdrs <- read.csv("derived-data/cUHDRS-results/res.csv")
dat <- read.csv("derived-data/dat_cuhdrs.csv")
res <- rbind(cbind(outcome = "TMS", res.tms),
cbind(outcome = "SDMT", res.sdmt),
cbind(outcome = "cUHDRS", res.cuhdrs)) %>%
mutate(Method = ifelse(method == "Semipar. (Param.)", "Semipar",
ifelse(method == "Semipar. (Nonpar.)", "Semipar",
ifelse(method == "MLE", "MLE", "CC"))),
Method = factor(Method, levels = c("Semipar", "MLE", "CC")),
nuisX = ifelse(method %in% c("Semipar. (Param.)", "MLE"), "Param",
ifelse(method == "Semipar. (Nonpar.)", "Nonpar", "-")),
nuisX = factor(nuisX, levels = c("Param", "Nonpar", "-")),
nuisC = ifelse(method == "Semipar. (Param.)", "Param",
ifelse(method == "Semipar. (Nonpar.)", "Nonpar", "-")),
nuisC = factor(nuisC, levels = c("Param", "Nonpar", "-")),
outcome = factor(outcome, levels = c("TMS", "SDMT", "cUHDRS")))
# underscore (\u2081) not working in plot
param.labs <- c("\u03B21", "\u03B22", "\u03B23", "\u03B24", "log\u03C3\u00B2")
names(param.labs) <- 1:5
method.labs <- c("Semipar (Param)", "Semipar (Nonpar)", "MLE", "CC")
names(method.labs) <- c("sp_param", "sp_nonpar", "ml", "cc")
## Plot estimates and CIs
ggplot(
data = res,
aes(x = method,
y = est,
ymin = ci.lower,
ymax = ci.upper,
color = method)) +
geom_point() +
geom_errorbar() +
facet_grid(outcome ~ param,
labeller = labeller(param = param.labs),
scales = "free_y") +
labs(y = "Estimate with 95% CI",
color = "Method") +
ggtitle("ENROLL-HD Analysis Results",
subtitle = "Outcome ~ (Time to Diagnosis) + CAP Category") +
theme_bw() +
theme(legend.position = "bottom",
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
## Table of results
tbl1 <- res %>%
dplyr::select(outcome, param, Method, nuisX, nuisC,
est, ste, ci.lower, ci.upper) %>%
arrange(param, Method, nuisX) %>%
mutate_if(is.numeric, function(x) round(x, 2))
## Table of results for second parameter only
tbl2 <- res %>%
filter(param == 2) %>%
mutate(ci = paste0("(", round(ci.lower, 2),
", ", round(ci.upper, 2), ")")) %>%
dplyr::select(outcome, Method, nuisX, nuisC, est, ste, ci) %>%
arrange(outcome, Method, nuisX) %>%
mutate_if(is.numeric, function(x) round(x, 2))
tbl2 %>%
kable(format = "latex",
digits = 2,
align = c(rep("c", 4),
rep("r", 3)),
booktabs = TRUE,
linesep = c("", "", "", "\\addlinespace\\hline"),
escape = FALSE,
col.names = c("Outcome", "Method", "X|Z", "C|Z",
"Estimate", "Std Error", "95% CI")) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
View(tbl2)
## get predicted values over range of X values
len.new <- 100
Xnew <- data.frame(
int = 1,
X = seq(min(dat$W), max(dat$W), length = len.new),
Z = rep(0:1, each = len.new)) %>%
mutate(XZ = X * Z) %>%
as.matrix()
Yhats <- do.call(rbind, lapply(
unique(res$outcome),
function(outcome) {
Yhat.list <- lapply(
names(method.labs),
function(m) {
BV <- readRDS(paste0("derived-data/", outcome,
"-results/", m, "_res"))
B <- BV$B[1:4]; V <- BV$V[1:4, 1:4]
g <- ifelse(outcome == "cUHDRS", sqrt, function(x) x)
Yhat <- Xnew %*% B
Yhat.se <- sqrt(diag(Xnew %*% V %*% t(Xnew)))
pred <- data.frame(
method = m,
int = Xnew[,1],
X = Xnew[,2],
Z = factor(Xnew[,3]),
Yhat = g(Yhat),
Ylower = g(Yhat - qnorm(0.975) * Yhat.se),
Yupper = g(Yhat + qnorm(0.975) * Yhat.se)
)
})
return(cbind(outcome = outcome, do.call(rbind, Yhat.list)))
})) %>%
mutate(Xscaled = (X * (2796.01 - 17.99) + 17.99) / 365,
Z = factor(Z,
levels = 0:1,
labels = c("Low", "High")),
method = factor(method,
levels = c("sp_param", "sp_nonpar", "ml", "cc")))
## plot fitted lines and 95% confidence intervals
ggplot(data = Yhats,
aes(x = Xscaled,
y = Yhat,
ymin = Ylower,
ymax = Yupper,
color = Z,
fill = Z)) +
geom_line() +
geom_ribbon(alpha = 0.5) +
facet_grid(outcome ~ method,
scales = "free",
labeller = labeller(method = method.labs)) +
theme_bw() +
scale_x_reverse() +
labs(y = "Estimated Mean Outcome (and 95% CI)",
x = "Years Until Diagnosis",
color = "CAP Score",
fill = "CAP Score") +
theme(legend.position = "bottom")
ggsave("figures/analysis_fig1.png", dpi = 300, width = 6, height = 6)
View(tbl1)
## Table of results
tbl2 <- res %>%
mutate(ci = paste0("(", round(ci.lower, 2),
", ", round(ci.upper, 2), ")")) %>%
dplyr::select(outcome, param, Method, nuisX, nuisC, est, ste, ci) %>%
arrange(outcome, Method, nuisX) %>%
mutate_if(is.numeric, function(x) round(x, 2))
## Table of results
tbl1 <- res %>%
mutate(ci = paste0("(", round(ci.lower, 2),
", ", round(ci.upper, 2), ")")) %>%
dplyr::select(outcome, param, Method, nuisX, nuisC, est, ste, ci) %>%
arrange(outcome, Method, nuisX) %>%
mutate_if(is.numeric, function(x) round(x, 2))
tbl1 %>%
kable(format = "latex",
digits = 2,
align = c(rep("c", 4),
rep("r", 3)),
booktabs = TRUE,
linesep = c("", "", "", "\\addlinespace\\hline"),
escape = FALSE,
col.names = c("Outcome", "Method", "X|Z", "C|Z",
"Estimate", "Std Error", "95% CI")) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
tbl1 %>%
kable(format = "latex",
digits = 2,
align = c(rep("c", 4),
rep("r", 3)),
booktabs = TRUE,
linesep = c("", "", "", "\\addlinespace\\hline"),
escape = FALSE,
col.names = c("Outcome", "Parameter", "Method", "X|Z", "C|Z",
"Estimate", "Std Error", "95% CI")) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
## Table of results for second parameter only
tbl2 <- res %>%
filter(param == 2) %>%
mutate(ci = paste0("(", round(ci.lower, 2),
", ", round(ci.upper, 2), ")")) %>%
dplyr::select(outcome, Method, nuisX, nuisC, est, ste, ci) %>%
arrange(outcome, Method, nuisX) %>%
mutate_if(is.numeric, function(x) round(x, 2))
tbl2 %>%
kable(format = "latex",
digits = 2,
align = c(rep("c", 4),
rep("r", 3)),
booktabs = TRUE,
linesep = c("", "", "", "\\addlinespace\\hline"),
escape = FALSE,
col.names = c("Outcome", "Method", "X|Z", "C|Z",
"Estimate", "Std Error", "95% CI")) %>%
kable_styling("striped") %>%
row_spec(row = 0, bold = TRUE)
## Table of results
tbl1 <- res %>%
mutate(ci = paste0("(", round(ci.lower, 2),
", ", round(ci.upper, 2), ")")) %>%
dplyr::select(outcome, param, Method, nuisX, nuisC, est, ste, ci) %>%
arrange(outcome, param, Method, nuisX) %>%
mutate_if(is.numeric, function(x) round(x, 2))
rm(list = ls())
# indicator for running on cluster
on.cluster <- F
if (on.cluster) {
setwd(dirname(getwd()))
args <- commandArgs(TRUE)          # cluster id
} else {
args <- 1
}
library(devtools)
library(statmod)
library(fitdistrplus)
library(dplyr)
library(numDeriv)
library(zipfR)
load_all()
setwd("C:/Users/Brian Richardson/OneDrive - University of North Carolina at Chapel Hill/Desktop/Garcia Lab/Research/Projects-Active/HDSP/sparcc")
###############################################################################
###############################################################################
# Run Simulation 1
# Brian Richardson
# 2024-04-12
# Purpose: run simulations comparing methods under misspecification
###############################################################################
###############################################################################
# prep workspace ----------------------------------------------------------
rm(list = ls())
# indicator for running on cluster
on.cluster <- F
if (on.cluster) {
setwd(dirname(getwd()))
args <- commandArgs(TRUE)          # cluster id
} else {
args <- 1
}
library(devtools)
library(statmod)
library(fitdistrplus)
library(dplyr)
library(numDeriv)
library(zipfR)
load_all()
# simulation parameters ---------------------------------------------------
base.seed <- 10^6 * as.integer(args) # baseline seed (specific to cluster)
len.out <- 85                        # output size
n.sim <- 1#100                         # number of sims per cluster
n <- 8000                            # sample size
q <- 0.4#c(0.4, 0.8)
## create simulation input
sim.in <- expand.grid(n = n,
q = q,
sim.id = 1:n.sim + base.seed)
ii = 1
#tryCatch(
#  expr =
sim1_v2(
n = sim.in$n[ii],
q = sim.in$q[ii],
seed = sim.in$sim.id[ii])#,
#tryCatch(
#  expr =
sim1_v2(
n = sim.in$n[ii],
q = sim.in$q[ii],
seed = sim.in$sim.id[ii])#,
